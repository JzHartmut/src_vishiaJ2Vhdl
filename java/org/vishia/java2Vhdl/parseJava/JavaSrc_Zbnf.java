package org.vishia.java2Vhdl.parseJava;

import java.util.LinkedList;
import java.util.List;

import org.vishia.util.Debugutil;
import org.vishia.util.SetLineColumn_ifc;

/**This file is generated by genJavaOut.jzTc script. 
 * It is the derived class to write Zbnf result. */
public class JavaSrc_Zbnf {
  
  /**Referenced working instance will be filled.*/
  public final JavaSrc dataJavaSrc;
  
  /**Default ctor for non-inherit instance. */
  public JavaSrc_Zbnf ( ) {
    this.dataJavaSrc = new JavaSrc();
  }
  
  
  
    /**Creates an instance for the result Zbnf . &lt;Classpath?PackageDefinition&gt; for ZBNF data store*/
    public Classpath_Zbnf new_PackageDefinition() { 
      Classpath_Zbnf val = new Classpath_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Classpath?PackageDefinition&gt;*/
    public void set_PackageDefinition(Classpath_Zbnf val) { 
      dataJavaSrc.packageDefinition = val.dataClasspath;
    }
    
    
    /**create and add routine for the list component <ImportStatement?importStatement>. */
    public ImportStatement_Zbnf new_importStatement() { 
      ImportStatement_Zbnf val = new ImportStatement_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ImportStatement?importStatement&gt;*/
    public void add_importStatement(ImportStatement_Zbnf val) {
      if(dataJavaSrc.importStatement==null) { dataJavaSrc.importStatement = new LinkedList<JavaSrc.ImportStatement>(); }
      dataJavaSrc.importStatement.add(val.dataImportStatement); 
    }
    
    
    /**create and add routine for the list component <ClassDefinition?classDefinition>. */
    public ClassDefinition_Zbnf new_classDefinition() { 
      ClassDefinition_Zbnf val = new ClassDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ClassDefinition?classDefinition&gt;*/
    public void add_classDefinition(ClassDefinition_Zbnf val) {
      if(dataJavaSrc.classDefinition==null) { dataJavaSrc.classDefinition = new LinkedList<JavaSrc.ClassDefinition>(); }
      dataJavaSrc.classDefinition.add(val.dataClassDefinition); 
    }
    
    
    /**create and add routine for the list component <InterfaceDefinition?interfaceDefinition>. */
    public InterfaceDefinition_Zbnf new_interfaceDefinition() { 
      InterfaceDefinition_Zbnf val = new InterfaceDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;InterfaceDefinition?interfaceDefinition&gt;*/
    public void add_interfaceDefinition(InterfaceDefinition_Zbnf val) {
      if(dataJavaSrc.interfaceDefinition==null) { dataJavaSrc.interfaceDefinition = new LinkedList<JavaSrc.InterfaceDefinition>(); }
      dataJavaSrc.interfaceDefinition.add(val.dataInterfaceDefinition); 
    }
    
    
    /**create and add routine for the list component <AnnotationDefinition?annotationDefinition>. */
    public AnnotationDefinition_Zbnf new_annotationDefinition() { 
      AnnotationDefinition_Zbnf val = new AnnotationDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;AnnotationDefinition?annotationDefinition&gt;*/
    public void add_annotationDefinition(AnnotationDefinition_Zbnf val) {
      if(dataJavaSrc.annotationDefinition==null) { dataJavaSrc.annotationDefinition = new LinkedList<JavaSrc.AnnotationDefinition>(); }
      dataJavaSrc.annotationDefinition.add(val.dataAnnotationDefinition); 
    }
    
    



  /**Class for Writing the Component classpath.*/
  public static class Classpath_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Classpath dataClasspath;
    
    /**Default ctor for non-inherit instance. */
    public Classpath_Zbnf ( ) {
      this.dataClasspath = new JavaSrc.Classpath();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Classpath_Zbnf ( JavaSrc.Classpath data) {
            this.dataClasspath = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataClasspath._srcLine_ = line; 
      this.dataClasspath._srcColumn_ = column; 
      this.dataClasspath._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?packageClassName>. */
    public void set_packageClassName(String val) { 
      if(dataClasspath.packageClassName==null) { dataClasspath.packageClassName = new LinkedList<String>(); }
      dataClasspath.packageClassName.add(val); 
    }
    
    
  
  }




  /**Class for Writing the Component importStatement.*/
  public static class ImportStatement_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.ImportStatement dataImportStatement;
    
    /**Default ctor for non-inherit instance. */
    public ImportStatement_Zbnf ( ) {
      this.dataImportStatement = new JavaSrc.ImportStatement();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public ImportStatement_Zbnf ( JavaSrc.ImportStatement data) {
            this.dataImportStatement = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataImportStatement._srcLine_ = line; 
      this.dataImportStatement._srcColumn_ = column; 
      this.dataImportStatement._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?packagePath>. */
    public void set_packagePath(String val) { 
      if(dataImportStatement.packagePath==null) { dataImportStatement.packagePath = new LinkedList<String>(); }
      dataImportStatement.packagePath.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?class>. */
    public void set_class(String val) { this.dataImportStatement.class___ = val; }
    
    
    /**Set routine for the singular component &lt;String?allClasses>. */
    public void set_allClasses(String val) { this.dataImportStatement.allClasses = val; }
    
    
  
  }




  /**Class for Writing the Component classDefinition.*/
  public static class ClassDefinition_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.ClassDefinition dataClassDefinition;
    
    /**Default ctor for non-inherit instance. */
    public ClassDefinition_Zbnf ( ) {
      this.dataClassDefinition = new JavaSrc.ClassDefinition();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public ClassDefinition_Zbnf ( JavaSrc.ClassDefinition data) {
            this.dataClassDefinition = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataClassDefinition._srcLine_ = line; 
      this.dataClassDefinition._srcColumn_ = column; 
      this.dataClassDefinition._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf . &lt;Description?description&gt; for ZBNF data store*/
    public Description_Zbnf new_description() { 
      Description_Zbnf val = new Description_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Description?description&gt;*/
    public void set_description(Description_Zbnf val) { 
      dataClassDefinition.description = val.dataDescription;
    }
    
    
    /**Set routine for the singular component &lt;String?SuppressWarnings>. */
    public void set_SuppressWarnings(String val) { this.dataClassDefinition.suppressWarnings = val; }
    
    
    /**Set routine for the singular component &lt;String?isStatic>. */
    public void set_isStatic(String val) { this.dataClassDefinition.isStatic = val; }
    
    
    /**Set routine for the singular component &lt;String?isFinal>. */
    public void set_isFinal(String val) { this.dataClassDefinition.isFinal = val; }
    
    
    /**Set routine for the singular component &lt;String?isAbstract>. */
    public void set_isAbstract(String val) { this.dataClassDefinition.isAbstract = val; }
    
    
    /**Set routine for the singular component &lt;String?staticInstance>. */
    public void set_staticInstance(String val) { this.dataClassDefinition.staticInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?noObject>. */
    public void set_noObject(String val) { this.dataClassDefinition.noObject = val; }
    
    
    /**Set routine for the singular component &lt;String?ExcludeInterface>. */
    public void set_ExcludeInterface(String val) { this.dataClassDefinition.excludeInterface = val; }
    
    
    /**Set routine for the singular component &lt;String?Annotation>. */
    public void set_Annotation(String val) { this.dataClassDefinition.annotation = val; }
    
    
    /**Set routine for the singular component &lt;String?AccessRight>. */
    public void set_AccessRight(String val) { this.dataClassDefinition.accessRight = val; }
    
    
    /**Set routine for the singular component &lt;String?classident>. */
    public void set_classident(String val) { this.dataClassDefinition.classident = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Generic?generic&gt; for ZBNF data store*/
    public Generic_Zbnf new_generic() { 
      Generic_Zbnf val = new Generic_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Generic?generic&gt;*/
    public void set_generic(Generic_Zbnf val) { 
      dataClassDefinition.generic = val.dataGeneric;
    }
    
    
    /**Creates an instance for the result Zbnf  (not Xml) . &lt;TypeIdent?Superclass&gt; for ZBNF data store*/
    public TypeIdent_Zbnf new_Superclass() { 
      TypeIdent_Zbnf val = new TypeIdent_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Creates an instance for the Xml data storage with default attibutes. &lt;TypeIdent?Superclass&gt;  */
    public TypeIdent_Zbnf new_Superclass(String name ) { 
      TypeIdent_Zbnf val = new TypeIdent_Zbnf();
      val.dataTypeIdent.name = name;
      //
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;TypeIdent?Superclass&gt;*/
    public void set_Superclass(TypeIdent_Zbnf val) { 
      dataClassDefinition.superclass = val.dataTypeIdent;
    }
    
    
    /**create and add routine for the list component <TypeIdent?ImplementedInterface>. */
    public TypeIdent_Zbnf new_ImplementedInterface() { 
      TypeIdent_Zbnf val = new TypeIdent_Zbnf(); 
      return val; 
    }
    
    /**Creates an instance for the Xml data storage with default attibutes. &lt;TypeIdent?ImplementedInterface&gt;  */
    public TypeIdent_Zbnf new_ImplementedInterface(String name ) { 
      TypeIdent_Zbnf val = new TypeIdent_Zbnf();
      val.dataTypeIdent.name = name;
      //
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Add the result to the list. &lt;TypeIdent?ImplementedInterface&gt;*/
    public void add_ImplementedInterface(TypeIdent_Zbnf val) {
      if(dataClassDefinition.implementedInterface==null) { dataClassDefinition.implementedInterface = new LinkedList<JavaSrc.TypeIdent>(); }
      dataClassDefinition.implementedInterface.add(val.dataTypeIdent); 
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;ClassContent?classContent&gt; for ZBNF data store*/
    public ClassContent_Zbnf new_classContent() { 
      ClassContent_Zbnf val = new ClassContent_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ClassContent?classContent&gt;*/
    public void set_classContent(ClassContent_Zbnf val) { 
      dataClassDefinition.classContent = val.dataClassContent;
    }
    
    
  
  }




  /**Class for Writing the Component interfaceDefinition.*/
  public static class InterfaceDefinition_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.InterfaceDefinition dataInterfaceDefinition;
    
    /**Default ctor for non-inherit instance. */
    public InterfaceDefinition_Zbnf ( ) {
      this.dataInterfaceDefinition = new JavaSrc.InterfaceDefinition();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public InterfaceDefinition_Zbnf ( JavaSrc.InterfaceDefinition data) {
            this.dataInterfaceDefinition = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataInterfaceDefinition._srcLine_ = line; 
      this.dataInterfaceDefinition._srcColumn_ = column; 
      this.dataInterfaceDefinition._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?SuppressWarnings>. */
    public void set_SuppressWarnings(String val) { this.dataInterfaceDefinition.suppressWarnings = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Description?description&gt; for ZBNF data store*/
    public Description_Zbnf new_description() { 
      Description_Zbnf val = new Description_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Description?description&gt;*/
    public void set_description(Description_Zbnf val) { 
      dataInterfaceDefinition.description = val.dataDescription;
    }
    
    
    /**Set routine for the singular component &lt;String?isStatic>. */
    public void set_isStatic(String val) { this.dataInterfaceDefinition.isStatic = val; }
    
    
    /**Set routine for the singular component &lt;String?isFinal>. */
    public void set_isFinal(String val) { this.dataInterfaceDefinition.isFinal = val; }
    
    
    /**Set routine for the singular component &lt;String?isAbstract>. */
    public void set_isAbstract(String val) { this.dataInterfaceDefinition.isAbstract = val; }
    
    
    /**Set routine for the singular component &lt;String?staticInstance>. */
    public void set_staticInstance(String val) { this.dataInterfaceDefinition.staticInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?noObject>. */
    public void set_noObject(String val) { this.dataInterfaceDefinition.noObject = val; }
    
    
    /**Set routine for the singular component &lt;String?ExcludeInterface>. */
    public void set_ExcludeInterface(String val) { this.dataInterfaceDefinition.excludeInterface = val; }
    
    
    /**Set routine for the singular component &lt;String?Annotation>. */
    public void set_Annotation(String val) { this.dataInterfaceDefinition.annotation = val; }
    
    
    /**Set routine for the singular component &lt;String?AccessRight>. */
    public void set_AccessRight(String val) { this.dataInterfaceDefinition.accessRight = val; }
    
    
    /**Set routine for the singular component &lt;String?classident>. */
    public void set_classident(String val) { this.dataInterfaceDefinition.classident = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Generic?generic&gt; for ZBNF data store*/
    public Generic_Zbnf new_generic() { 
      Generic_Zbnf val = new Generic_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Generic?generic&gt;*/
    public void set_generic(Generic_Zbnf val) { 
      dataInterfaceDefinition.generic = val.dataGeneric;
    }
    
    
    /**Set routine for the singular component &lt;String?SuperInterface>. */
    public void set_SuperInterface(String val) { 
      if(dataInterfaceDefinition.superInterface==null) { dataInterfaceDefinition.superInterface = new LinkedList<String>(); }
      dataInterfaceDefinition.superInterface.add(val); 
    }
    
    
    /**create and add routine for the list component <EnumDefinition?enumDefinition>. */
    public EnumDefinition_Zbnf new_enumDefinition() { 
      EnumDefinition_Zbnf val = new EnumDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;EnumDefinition?enumDefinition&gt;*/
    public void add_enumDefinition(EnumDefinition_Zbnf val) {
      if(dataInterfaceDefinition.enumDefinition==null) { dataInterfaceDefinition.enumDefinition = new LinkedList<JavaSrc.EnumDefinition>(); }
      dataInterfaceDefinition.enumDefinition.add(val.dataEnumDefinition); 
    }
    
    
    /**create and add routine for the list component <VariableInstance?variableDefinition>. */
    public VariableInstance_Zbnf new_variableDefinition() { 
      VariableInstance_Zbnf val = new VariableInstance_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;VariableInstance?variableDefinition&gt;*/
    public void add_variableDefinition(VariableInstance_Zbnf val) {
      if(dataInterfaceDefinition.variableDefinition==null) { dataInterfaceDefinition.variableDefinition = new LinkedList<JavaSrc.VariableInstance>(); }
      dataInterfaceDefinition.variableDefinition.add(val.dataVariableInstance); 
    }
    
    
    /**create and add routine for the list component <MethodDefinition?methodDefinition>. */
    public MethodDefinition_Zbnf new_methodDefinition() { 
      MethodDefinition_Zbnf val = new MethodDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;MethodDefinition?methodDefinition&gt;*/
    public void add_methodDefinition(MethodDefinition_Zbnf val) {
      if(dataInterfaceDefinition.methodDefinition==null) { dataInterfaceDefinition.methodDefinition = new LinkedList<JavaSrc.MethodDefinition>(); }
      dataInterfaceDefinition.methodDefinition.add(val.dataMethodDefinition); 
    }
    
    
    /**create and add routine for the list component <InterfaceDefinition?interfaceDefinition>. */
    public InterfaceDefinition_Zbnf new_interfaceDefinition() { 
      InterfaceDefinition_Zbnf val = new InterfaceDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;InterfaceDefinition?interfaceDefinition&gt;*/
    public void add_interfaceDefinition(InterfaceDefinition_Zbnf val) {
      if(dataInterfaceDefinition.interfaceDefinition==null) { dataInterfaceDefinition.interfaceDefinition = new LinkedList<JavaSrc.InterfaceDefinition>(); }
      dataInterfaceDefinition.interfaceDefinition.add(val.dataInterfaceDefinition); 
    }
    
    
    /**create and add routine for the list component <AnnotationDefinition?annotationDefinition>. */
    public AnnotationDefinition_Zbnf new_annotationDefinition() { 
      AnnotationDefinition_Zbnf val = new AnnotationDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;AnnotationDefinition?annotationDefinition&gt;*/
    public void add_annotationDefinition(AnnotationDefinition_Zbnf val) {
      if(dataInterfaceDefinition.annotationDefinition==null) { dataInterfaceDefinition.annotationDefinition = new LinkedList<JavaSrc.AnnotationDefinition>(); }
      dataInterfaceDefinition.annotationDefinition.add(val.dataAnnotationDefinition); 
    }
    
    
    /**create and add routine for the list component <ClassDefinition?classDefinition>. */
    public ClassDefinition_Zbnf new_classDefinition() { 
      ClassDefinition_Zbnf val = new ClassDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ClassDefinition?classDefinition&gt;*/
    public void add_classDefinition(ClassDefinition_Zbnf val) {
      if(dataInterfaceDefinition.classDefinition==null) { dataInterfaceDefinition.classDefinition = new LinkedList<JavaSrc.ClassDefinition>(); }
      dataInterfaceDefinition.classDefinition.add(val.dataClassDefinition); 
    }
    
    
  
  }




  /**Class for Writing the Component annotationDefinition.*/
  public static class AnnotationDefinition_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.AnnotationDefinition dataAnnotationDefinition;
    
    /**Default ctor for non-inherit instance. */
    public AnnotationDefinition_Zbnf ( ) {
      this.dataAnnotationDefinition = new JavaSrc.AnnotationDefinition();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public AnnotationDefinition_Zbnf ( JavaSrc.AnnotationDefinition data) {
            this.dataAnnotationDefinition = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataAnnotationDefinition._srcLine_ = line; 
      this.dataAnnotationDefinition._srcColumn_ = column; 
      this.dataAnnotationDefinition._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?SuppressWarnings>. */
    public void set_SuppressWarnings(String val) { 
      if(dataAnnotationDefinition.suppressWarnings==null) { dataAnnotationDefinition.suppressWarnings = new LinkedList<String>(); }
      dataAnnotationDefinition.suppressWarnings.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?RententionPolicy>. */
    public void set_RententionPolicy(String val) { this.dataAnnotationDefinition.rententionPolicy = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Description?description&gt; for ZBNF data store*/
    public Description_Zbnf new_description() { 
      Description_Zbnf val = new Description_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Description?description&gt;*/
    public void set_description(Description_Zbnf val) { 
      dataAnnotationDefinition.description = val.dataDescription;
    }
    
    
    /**Set routine for the singular component &lt;String?ident>. */
    public void set_ident(String val) { this.dataAnnotationDefinition.ident = val; }
    
    
    /**Set routine for the singular component &lt;String?param>. */
    public void set_param(String val) { 
      if(dataAnnotationDefinition.param==null) { dataAnnotationDefinition.param = new LinkedList<String>(); }
      dataAnnotationDefinition.param.add(val); 
    }
    
    
    /**create and add routine for the list component <Type?type>. */
    public Type_Zbnf new_type() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?type&gt;*/
    public void add_type(Type_Zbnf val) {
      if(dataAnnotationDefinition.type==null) { dataAnnotationDefinition.type = new LinkedList<JavaSrc.Type>(); }
      dataAnnotationDefinition.type.add(val.dataType); 
    }
    
    
  
  }




  /**Class for Writing the Component AccessRight.*/
  public static class AccessRight_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.AccessRight dataAccessRight;
    
    /**Default ctor for non-inherit instance. */
    public AccessRight_Zbnf ( ) {
      this.dataAccessRight = new JavaSrc.AccessRight();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public AccessRight_Zbnf ( JavaSrc.AccessRight data) {
            this.dataAccessRight = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataAccessRight._srcLine_ = line; 
      this.dataAccessRight._srcColumn_ = column; 
      this.dataAccessRight._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?AccessRight>. */
    public void set_AccessRight(String val) { this.dataAccessRight.accessRight = val; }
    
    
  
  }




  /**Class for Writing the Component Expression.*/
  public static class Expression_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Expression dataExpression;
    
    /**Default ctor for non-inherit instance. */
    public Expression_Zbnf ( ) {
      this.dataExpression = new JavaSrc.Expression();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Expression_Zbnf ( JavaSrc.Expression data) {
            this.dataExpression = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataExpression._srcLine_ = line; 
      this.dataExpression._srcColumn_ = column; 
      this.dataExpression._srcFile_ = sFile; 
    }
  
  
  
  
    /**create and add routine for the list component <ExprPart?ExprPart>. */
    public ExprPart_Zbnf new_ExprPart() { 
      ExprPart_Zbnf val = new ExprPart_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ExprPart?ExprPart&gt;*/
    public void add_ExprPart(ExprPart_Zbnf val) {
      if(dataExpression.exprPart==null) { dataExpression.exprPart = new LinkedList<JavaSrc.ExprPart>(); }
      dataExpression.exprPart.add(val.dataExprPart); 
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;TrueFalseValue?TrueFalseValue&gt; for ZBNF data store*/
    public TrueFalseValue_Zbnf new_TrueFalseValue() { 
      TrueFalseValue_Zbnf val = new TrueFalseValue_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;TrueFalseValue?TrueFalseValue&gt;*/
    public void set_TrueFalseValue(TrueFalseValue_Zbnf val) { 
      dataExpression.trueFalseValue = val.dataTrueFalseValue;
    }
    
    
  
  }




  /**Class for Writing the Component Java4CAnnotationClass.*/
  public static class Java4CAnnotationClass_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Java4CAnnotationClass dataJava4CAnnotationClass;
    
    /**Default ctor for non-inherit instance. */
    public Java4CAnnotationClass_Zbnf ( ) {
      this.dataJava4CAnnotationClass = new JavaSrc.Java4CAnnotationClass();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Java4CAnnotationClass_Zbnf ( JavaSrc.Java4CAnnotationClass data) {
            this.dataJava4CAnnotationClass = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataJava4CAnnotationClass._srcLine_ = line; 
      this.dataJava4CAnnotationClass._srcColumn_ = column; 
      this.dataJava4CAnnotationClass._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?staticInstance>. */
    public void set_staticInstance(String val) { this.dataJava4CAnnotationClass.staticInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?noObject>. */
    public void set_noObject(String val) { this.dataJava4CAnnotationClass.noObject = val; }
    
    
    /**Set routine for the singular component &lt;String?ExcludeInterface>. */
    public void set_ExcludeInterface(String val) { this.dataJava4CAnnotationClass.excludeInterface = val; }
    
    
  
  }




  /**Class for Writing the Component Java4CAnnotationMethod.*/
  public static class Java4CAnnotationMethod_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Java4CAnnotationMethod dataJava4CAnnotationMethod;
    
    /**Default ctor for non-inherit instance. */
    public Java4CAnnotationMethod_Zbnf ( ) {
      this.dataJava4CAnnotationMethod = new JavaSrc.Java4CAnnotationMethod();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Java4CAnnotationMethod_Zbnf ( JavaSrc.Java4CAnnotationMethod data) {
            this.dataJava4CAnnotationMethod = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataJava4CAnnotationMethod._srcLine_ = line; 
      this.dataJava4CAnnotationMethod._srcColumn_ = column; 
      this.dataJava4CAnnotationMethod._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?string>. */
    public void set_string(String val) { this.dataJava4CAnnotationMethod.string = val; }
    
    
    /**Set routine for the singular component &lt;String?instanceTypeAnnot>. */
    public void set_instanceTypeAnnot(String val) { this.dataJava4CAnnotationMethod.instanceTypeAnnot = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedTypeAnnot>. */
    public void set_embeddedTypeAnnot(String val) { this.dataJava4CAnnotationMethod.embeddedTypeAnnot = val; }
    
    
    /**Set routine for the singular component &lt;String?stackSize>. */
    public void set_stackSize(String val) { this.dataJava4CAnnotationMethod.stackSize = val; }
    
    
    /**Set routine for the singular component &lt;int?bytes>. */
    public void set_bytes(int val) { 
      if(dataJava4CAnnotationMethod.bytes==null) { dataJava4CAnnotationMethod.bytes = new LinkedList<Integer>(); }
      dataJava4CAnnotationMethod.bytes.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?typeStack>. */
    public void set_typeStack(String val) { 
      if(dataJava4CAnnotationMethod.typeStack==null) { dataJava4CAnnotationMethod.typeStack = new LinkedList<String>(); }
      dataJava4CAnnotationMethod.typeStack.add(val); 
    }
    
    
  
  }




  /**Class for Writing the Component Java4CAnnotationType.*/
  public static class Java4CAnnotationType_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Java4CAnnotationType dataJava4CAnnotationType;
    
    /**Default ctor for non-inherit instance. */
    public Java4CAnnotationType_Zbnf ( ) {
      this.dataJava4CAnnotationType = new JavaSrc.Java4CAnnotationType();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Java4CAnnotationType_Zbnf ( JavaSrc.Java4CAnnotationType data) {
            this.dataJava4CAnnotationType = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataJava4CAnnotationType._srcLine_ = line; 
      this.dataJava4CAnnotationType._srcColumn_ = column; 
      this.dataJava4CAnnotationType._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;int?fixArraySize>. */
    public void set_fixArraySize(int val) { this.dataJava4CAnnotationType.fixArraySize = val; }
    
    
    /**Set routine for the singular component &lt;String?string>. */
    public void set_string(String val) { this.dataJava4CAnnotationType.string = val; }
    
    
  
  }




  /**Class for Writing the Component Java4CAnnotationVariable.*/
  public static class Java4CAnnotationVariable_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Java4CAnnotationVariable dataJava4CAnnotationVariable;
    
    /**Default ctor for non-inherit instance. */
    public Java4CAnnotationVariable_Zbnf ( ) {
      this.dataJava4CAnnotationVariable = new JavaSrc.Java4CAnnotationVariable();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Java4CAnnotationVariable_Zbnf ( JavaSrc.Java4CAnnotationVariable data) {
            this.dataJava4CAnnotationVariable = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataJava4CAnnotationVariable._srcLine_ = line; 
      this.dataJava4CAnnotationVariable._srcColumn_ = column; 
      this.dataJava4CAnnotationVariable._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?string>. */
    public void set_string(String val) { this.dataJava4CAnnotationVariable.string = val; }
    
    
    /**Set routine for the singular component &lt;String?InstanceType>. */
    public void set_InstanceType(String val) { this.dataJava4CAnnotationVariable.instanceType = val; }
    
    
    /**Set routine for the singular component &lt;int?StringBuilderInStack>. */
    public void set_StringBuilderInStack(int val) { this.dataJava4CAnnotationVariable.stringBuilderInStack = val; }
    
    
    /**Set routine for the singular component &lt;String?StringBuilderInThCxt>. */
    public void set_StringBuilderInThCxt(String val) { this.dataJava4CAnnotationVariable.stringBuilderInThCxt = val; }
    
    
    /**Set routine for the singular component &lt;String?InThCxtRet>. */
    public void set_InThCxtRet(String val) { this.dataJava4CAnnotationVariable.inThCxtRet = val; }
    
    
    /**Set routine for the singular component &lt;String?InThCxtLocal>. */
    public void set_InThCxtLocal(String val) { this.dataJava4CAnnotationVariable.inThCxtLocal = val; }
    
    
  
  }




  /**Class for Writing the Component ModifierClass.*/
  public static class ModifierClass_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.ModifierClass dataModifierClass;
    
    /**Default ctor for non-inherit instance. */
    public ModifierClass_Zbnf ( ) {
      this.dataModifierClass = new JavaSrc.ModifierClass();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public ModifierClass_Zbnf ( JavaSrc.ModifierClass data) {
            this.dataModifierClass = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataModifierClass._srcLine_ = line; 
      this.dataModifierClass._srcColumn_ = column; 
      this.dataModifierClass._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?isStatic>. */
    public void set_isStatic(String val) { this.dataModifierClass.isStatic = val; }
    
    
    /**Set routine for the singular component &lt;String?isFinal>. */
    public void set_isFinal(String val) { this.dataModifierClass.isFinal = val; }
    
    
    /**Set routine for the singular component &lt;String?isAbstract>. */
    public void set_isAbstract(String val) { this.dataModifierClass.isAbstract = val; }
    
    
    /**Set routine for the singular component &lt;String?staticInstance>. */
    public void set_staticInstance(String val) { this.dataModifierClass.staticInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?noObject>. */
    public void set_noObject(String val) { this.dataModifierClass.noObject = val; }
    
    
    /**Set routine for the singular component &lt;String?ExcludeInterface>. */
    public void set_ExcludeInterface(String val) { this.dataModifierClass.excludeInterface = val; }
    
    
    /**Set routine for the singular component &lt;String?Annotation>. */
    public void set_Annotation(String val) { this.dataModifierClass.annotation = val; }
    
    
    /**Set routine for the singular component &lt;String?AccessRight>. */
    public void set_AccessRight(String val) { this.dataModifierClass.accessRight = val; }
    
    
  
  }




  /**Class for Writing the Component ModifierMethod.*/
  public static class ModifierMethod_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.ModifierMethod dataModifierMethod;
    
    /**Default ctor for non-inherit instance. */
    public ModifierMethod_Zbnf ( ) {
      this.dataModifierMethod = new JavaSrc.ModifierMethod();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public ModifierMethod_Zbnf ( JavaSrc.ModifierMethod data) {
            this.dataModifierMethod = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataModifierMethod._srcLine_ = line; 
      this.dataModifierMethod._srcColumn_ = column; 
      this.dataModifierMethod._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?isSynchronized>. */
    public void set_isSynchronized(String val) { this.dataModifierMethod.isSynchronized = val; }
    
    
    /**Set routine for the singular component &lt;String?isStatic>. */
    public void set_isStatic(String val) { this.dataModifierMethod.isStatic = val; }
    
    
    /**Set routine for the singular component &lt;String?isFinal>. */
    public void set_isFinal(String val) { this.dataModifierMethod.isFinal = val; }
    
    
    /**Set routine for the singular component &lt;String?isAbstract>. */
    public void set_isAbstract(String val) { this.dataModifierMethod.isAbstract = val; }
    
    
    /**Set routine for the singular component &lt;String?accessPlolicy>. */
    public void set_accessPlolicy(String val) { this.dataModifierMethod.accessPlolicy = val; }
    
    
    /**Set routine for the singular component &lt;String?isReadonlyRet>. */
    public void set_isReadonlyRet(String val) { this.dataModifierMethod.isReadonlyRet = val; }
    
    
    /**Set routine for the singular component &lt;String?isReadonly>. */
    public void set_isReadonly(String val) { this.dataModifierMethod.isReadonly = val; }
    
    
    /**Set routine for the singular component &lt;int?fixArraySize>. */
    public void set_fixArraySize(int val) { this.dataModifierMethod.fixArraySize = val; }
    
    
    /**Set routine for the singular component &lt;String?string>. */
    public void set_string(String val) { this.dataModifierMethod.string = val; }
    
    
    /**Set routine for the singular component &lt;String?instanceTypeAnnot>. */
    public void set_instanceTypeAnnot(String val) { this.dataModifierMethod.instanceTypeAnnot = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedTypeAnnot>. */
    public void set_embeddedTypeAnnot(String val) { this.dataModifierMethod.embeddedTypeAnnot = val; }
    
    
    /**Set routine for the singular component &lt;String?stackSize>. */
    public void set_stackSize(String val) { this.dataModifierMethod.stackSize = val; }
    
    
    /**Set routine for the singular component &lt;int?bytes>. */
    public void set_bytes(int val) { 
      if(dataModifierMethod.bytes==null) { dataModifierMethod.bytes = new LinkedList<Integer>(); }
      dataModifierMethod.bytes.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?typeStack>. */
    public void set_typeStack(String val) { 
      if(dataModifierMethod.typeStack==null) { dataModifierMethod.typeStack = new LinkedList<String>(); }
      dataModifierMethod.typeStack.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?A_Override>. */
    public void set_A_Override(String val) { this.dataModifierMethod.a_Override = val; }
    
    
    /**Set routine for the singular component &lt;String?Annotation>. */
    public void set_Annotation(String val) { this.dataModifierMethod.annotation = val; }
    
    
    /**Set routine for the singular component &lt;String?AccessRight>. */
    public void set_AccessRight(String val) { this.dataModifierMethod.accessRight = val; }
    
    
  
  }




  /**Class for Writing the Component ModifierVariable.*/
  public static class ModifierVariable_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.ModifierVariable dataModifierVariable;
    
    /**Default ctor for non-inherit instance. */
    public ModifierVariable_Zbnf ( ) {
      this.dataModifierVariable = new JavaSrc.ModifierVariable();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public ModifierVariable_Zbnf ( JavaSrc.ModifierVariable data) {
            this.dataModifierVariable = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataModifierVariable._srcLine_ = line; 
      this.dataModifierVariable._srcColumn_ = column; 
      this.dataModifierVariable._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?isStatic>. */
    public void set_isStatic(String val) { this.dataModifierVariable.isStatic = val; }
    
    
    /**Set routine for the singular component &lt;String?isFinal>. */
    public void set_isFinal(String val) { this.dataModifierVariable.isFinal = val; }
    
    
    /**Set routine for the singular component &lt;String?isVolatile>. */
    public void set_isVolatile(String val) { this.dataModifierVariable.isVolatile = val; }
    
    
    /**Set routine for the singular component &lt;String?isTransient>. */
    public void set_isTransient(String val) { this.dataModifierVariable.isTransient = val; }
    
    
    /**Set routine for the singular component &lt;String?accessPlolicy>. */
    public void set_accessPlolicy(String val) { 
      if(dataModifierVariable.accessPlolicy==null) { dataModifierVariable.accessPlolicy = new LinkedList<String>(); }
      dataModifierVariable.accessPlolicy.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?isReadonly>. */
    public void set_isReadonly(String val) { this.dataModifierVariable.isReadonly = val; }
    
    
    /**create and add routine for the list component <Java4CAnnotationVariable?Java4CAnnotationVariable>. */
    public Java4CAnnotationVariable_Zbnf new_Java4CAnnotationVariable() { 
      Java4CAnnotationVariable_Zbnf val = new Java4CAnnotationVariable_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Java4CAnnotationVariable?Java4CAnnotationVariable&gt;*/
    public void add_Java4CAnnotationVariable(Java4CAnnotationVariable_Zbnf val) {
      if(dataModifierVariable.java4CAnnotationVariable==null) { dataModifierVariable.java4CAnnotationVariable = new LinkedList<JavaSrc.Java4CAnnotationVariable>(); }
      dataModifierVariable.java4CAnnotationVariable.add(val.dataJava4CAnnotationVariable); 
    }
    
    
    /**create and add routine for the list component <Java4CAnnotationType?Java4CAnnotationType>. */
    public Java4CAnnotationType_Zbnf new_Java4CAnnotationType() { 
      Java4CAnnotationType_Zbnf val = new Java4CAnnotationType_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Java4CAnnotationType?Java4CAnnotationType&gt;*/
    public void add_Java4CAnnotationType(Java4CAnnotationType_Zbnf val) {
      if(dataModifierVariable.java4CAnnotationType==null) { dataModifierVariable.java4CAnnotationType = new LinkedList<JavaSrc.Java4CAnnotationType>(); }
      dataModifierVariable.java4CAnnotationType.add(val.dataJava4CAnnotationType); 
    }
    
    
    /**Set routine for the singular component &lt;String?Annotation>. */
    public void set_Annotation(String val) { 
      if(dataModifierVariable.annotation==null) { dataModifierVariable.annotation = new LinkedList<String>(); }
      dataModifierVariable.annotation.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?AccessRight>. */
    public void set_AccessRight(String val) { this.dataModifierVariable.accessRight = val; }
    
    
  
  }




  /**Class for Writing the Component TrueFalseValue.*/
  public static class TrueFalseValue_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.TrueFalseValue dataTrueFalseValue;
    
    /**Default ctor for non-inherit instance. */
    public TrueFalseValue_Zbnf ( ) {
      this.dataTrueFalseValue = new JavaSrc.TrueFalseValue();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public TrueFalseValue_Zbnf ( JavaSrc.TrueFalseValue data) {
            this.dataTrueFalseValue = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataTrueFalseValue._srcLine_ = line; 
      this.dataTrueFalseValue._srcColumn_ = column; 
      this.dataTrueFalseValue._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf . &lt;Expression?trueExpression&gt; for ZBNF data store*/
    public Expression_Zbnf new_trueExpression() { 
      Expression_Zbnf val = new Expression_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Expression?trueExpression&gt;*/
    public void set_trueExpression(Expression_Zbnf val) { 
      dataTrueFalseValue.trueExpression = val.dataExpression;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Expression?falseExpression&gt; for ZBNF data store*/
    public Expression_Zbnf new_falseExpression() { 
      Expression_Zbnf val = new Expression_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Expression?falseExpression&gt;*/
    public void set_falseExpression(Expression_Zbnf val) { 
      dataTrueFalseValue.falseExpression = val.dataExpression;
    }
    
    
  
  }




  /**Class for Writing the Component actualArguments.*/
  public static class ActualArguments_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.ActualArguments dataActualArguments;
    
    /**Default ctor for non-inherit instance. */
    public ActualArguments_Zbnf ( ) {
      this.dataActualArguments = new JavaSrc.ActualArguments();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public ActualArguments_Zbnf ( JavaSrc.ActualArguments data) {
            this.dataActualArguments = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataActualArguments._srcLine_ = line; 
      this.dataActualArguments._srcColumn_ = column; 
      this.dataActualArguments._srcFile_ = sFile; 
    }
  
  
  
  
    /**create and add routine for the list component <Expression?Expression>. */
    public Expression_Zbnf new_Expression() { 
      Expression_Zbnf val = new Expression_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Expression?Expression&gt;*/
    public void add_Expression(Expression_Zbnf val) {
      if(dataActualArguments.expression==null) { dataActualArguments.expression = new LinkedList<JavaSrc.Expression>(); }
      dataActualArguments.expression.add(val.dataExpression); 
    }
    
    
  
  }




  /**Class for Writing the Component annotation.*/
  public static class Annotation_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Annotation dataAnnotation;
    
    /**Default ctor for non-inherit instance. */
    public Annotation_Zbnf ( ) {
      this.dataAnnotation = new JavaSrc.Annotation();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Annotation_Zbnf ( JavaSrc.Annotation data) {
            this.dataAnnotation = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataAnnotation._srcLine_ = line; 
      this.dataAnnotation._srcColumn_ = column; 
      this.dataAnnotation._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?SuppressWarnings>. */
    public void set_SuppressWarnings(String val) { 
      if(dataAnnotation.suppressWarnings==null) { dataAnnotation.suppressWarnings = new LinkedList<String>(); }
      dataAnnotation.suppressWarnings.add(val); 
    }
    
    
  
  }




  /**Class for Writing the Component argument.*/
  public static class Argument_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Argument dataArgument;
    
    /**Default ctor for non-inherit instance. */
    public Argument_Zbnf ( ) {
      this.dataArgument = new JavaSrc.Argument();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Argument_Zbnf ( JavaSrc.Argument data) {
            this.dataArgument = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataArgument._srcLine_ = line; 
      this.dataArgument._srcColumn_ = column; 
      this.dataArgument._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf . &lt;ModifierVariable?ModifierVariable&gt; for ZBNF data store*/
    public ModifierVariable_Zbnf new_ModifierVariable() { 
      ModifierVariable_Zbnf val = new ModifierVariable_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ModifierVariable?ModifierVariable&gt;*/
    public void set_ModifierVariable(ModifierVariable_Zbnf val) { 
      dataArgument.modifierVariable = val.dataModifierVariable;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Type?type&gt; for ZBNF data store*/
    public Type_Zbnf new_type() { 
      Type_Zbnf val = new Type_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Type?type&gt;*/
    public void set_type(Type_Zbnf val) { 
      dataArgument.type = val.dataType;
    }
    
    
    /**Set routine for the singular component &lt;String?variableName>. */
    public void set_variableName(String val) { this.dataArgument.variableName = val; }
    
    
    /**Set routine for the singular component &lt;String?array>. */
    public void set_array(String val) { this.dataArgument.array = val; }
    
    
  
  }




  /**Class for Writing the Component argumentList.*/
  public static class ArgumentList_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.ArgumentList dataArgumentList;
    
    /**Default ctor for non-inherit instance. */
    public ArgumentList_Zbnf ( ) {
      this.dataArgumentList = new JavaSrc.ArgumentList();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public ArgumentList_Zbnf ( JavaSrc.ArgumentList data) {
            this.dataArgumentList = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataArgumentList._srcLine_ = line; 
      this.dataArgumentList._srcColumn_ = column; 
      this.dataArgumentList._srcFile_ = sFile; 
    }
  
  
  
  
    /**create and add routine for the list component <Argument?argument>. */
    public Argument_Zbnf new_argument() { 
      Argument_Zbnf val = new Argument_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Argument?argument&gt;*/
    public void add_argument(Argument_Zbnf val) {
      if(dataArgumentList.argument==null) { dataArgumentList.argument = new LinkedList<JavaSrc.Argument>(); }
      dataArgumentList.argument.add(val.dataArgument); 
    }
    
    
  
  }




  /**Class for Writing the Component arrayElementAccess.*/
  public static class ArrayElementAccess_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.ArrayElementAccess dataArrayElementAccess;
    
    /**Default ctor for non-inherit instance. */
    public ArrayElementAccess_Zbnf ( ) {
      this.dataArrayElementAccess = new JavaSrc.ArrayElementAccess();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public ArrayElementAccess_Zbnf ( JavaSrc.ArrayElementAccess data) {
            this.dataArrayElementAccess = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataArrayElementAccess._srcLine_ = line; 
      this.dataArrayElementAccess._srcColumn_ = column; 
      this.dataArrayElementAccess._srcFile_ = sFile; 
    }
  
  
  
  
    /**create and add routine for the list component <Expression?Expression>. */
    public Expression_Zbnf new_Expression() { 
      Expression_Zbnf val = new Expression_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Expression?Expression&gt;*/
    public void add_Expression(Expression_Zbnf val) {
      if(dataArrayElementAccess.expression==null) { dataArrayElementAccess.expression = new LinkedList<JavaSrc.Expression>(); }
      dataArrayElementAccess.expression.add(val.dataExpression); 
    }
    
    
  
  }




  /**Class for Writing the Component caseExpr.*/
  public static class CaseExpr_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.CaseExpr dataCaseExpr;
    
    /**Default ctor for non-inherit instance. */
    public CaseExpr_Zbnf ( ) {
      this.dataCaseExpr = new JavaSrc.CaseExpr();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public CaseExpr_Zbnf ( JavaSrc.CaseExpr data) {
            this.dataCaseExpr = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataCaseExpr._srcLine_ = line; 
      this.dataCaseExpr._srcColumn_ = column; 
      this.dataCaseExpr._srcFile_ = sFile; 
    }
  
  
  
  
    /**create and add routine for the list component <Expression?Expression>. */
    public Expression_Zbnf new_Expression() { 
      Expression_Zbnf val = new Expression_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Expression?Expression&gt;*/
    public void add_Expression(Expression_Zbnf val) {
      if(dataCaseExpr.expression==null) { dataCaseExpr.expression = new LinkedList<JavaSrc.Expression>(); }
      dataCaseExpr.expression.add(val.dataExpression); 
    }
    
    
    /**create and add routine for the list component <ClassDefinition?classDefinition>. */
    public ClassDefinition_Zbnf new_classDefinition() { 
      ClassDefinition_Zbnf val = new ClassDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ClassDefinition?classDefinition&gt;*/
    public void add_classDefinition(ClassDefinition_Zbnf val) {
      if(dataCaseExpr.classDefinition==null) { dataCaseExpr.classDefinition = new LinkedList<JavaSrc.ClassDefinition>(); }
      dataCaseExpr.classDefinition.add(val.dataClassDefinition); 
    }
    
    
    /**create and add routine for the list component <Statement?statement>. */
    public Statement_Zbnf new_statement() { 
      Statement_Zbnf val = new Statement_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Statement?statement&gt;*/
    public void add_statement(Statement_Zbnf val) {
      if(dataCaseExpr.statement==null) { dataCaseExpr.statement = new LinkedList<JavaSrc.Statement>(); }
      dataCaseExpr.statement.add(val.dataStatement); 
    }
    
    
  
  }




  /**Class for Writing the Component catchBlock.*/
  public static class CatchBlock_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.CatchBlock dataCatchBlock;
    
    /**Default ctor for non-inherit instance. */
    public CatchBlock_Zbnf ( ) {
      this.dataCatchBlock = new JavaSrc.CatchBlock();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public CatchBlock_Zbnf ( JavaSrc.CatchBlock data) {
            this.dataCatchBlock = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataCatchBlock._srcLine_ = line; 
      this.dataCatchBlock._srcColumn_ = column; 
      this.dataCatchBlock._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf  (not Xml) . &lt;TypeIdent?ExceptionType&gt; for ZBNF data store*/
    public TypeIdent_Zbnf new_ExceptionType() { 
      TypeIdent_Zbnf val = new TypeIdent_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Creates an instance for the Xml data storage with default attibutes. &lt;TypeIdent?ExceptionType&gt;  */
    public TypeIdent_Zbnf new_ExceptionType(String name ) { 
      TypeIdent_Zbnf val = new TypeIdent_Zbnf();
      val.dataTypeIdent.name = name;
      //
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;TypeIdent?ExceptionType&gt;*/
    public void set_ExceptionType(TypeIdent_Zbnf val) { 
      dataCatchBlock.exceptionType = val.dataTypeIdent;
    }
    
    
    /**Set routine for the singular component &lt;String?exceptionVariable>. */
    public void set_exceptionVariable(String val) { this.dataCatchBlock.exceptionVariable = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;StatementBlock?statementBlock&gt; for ZBNF data store*/
    public StatementBlock_Zbnf new_statementBlock() { 
      StatementBlock_Zbnf val = new StatementBlock_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;StatementBlock?statementBlock&gt;*/
    public void set_statementBlock(StatementBlock_Zbnf val) { 
      dataCatchBlock.statementBlock = val.dataStatementBlock;
    }
    
    
  
  }




  /**Class for Writing the Component classContent.*/
  public static class ClassContent_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.ClassContent dataClassContent;
    
    /**Default ctor for non-inherit instance. */
    public ClassContent_Zbnf ( ) {
      this.dataClassContent = new JavaSrc.ClassContent();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public ClassContent_Zbnf ( JavaSrc.ClassContent data) {
            this.dataClassContent = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataClassContent._srcLine_ = line; 
      this.dataClassContent._srcColumn_ = column; 
      this.dataClassContent._srcFile_ = sFile; 
    }
  
  
    public void set_description(JavaSrc_Zbnf.Description_Zbnf val) {
      Debugutil.stop();
    }
  
  
    /**create and add routine for the list component <EnumDefinition?enumDefinition>. */
    public EnumDefinition_Zbnf new_enumDefinition() { 
      EnumDefinition_Zbnf val = new EnumDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;EnumDefinition?enumDefinition&gt;*/
    public void add_enumDefinition(EnumDefinition_Zbnf val) {
      if(dataClassContent.enumDefinition==null) { dataClassContent.enumDefinition = new LinkedList<JavaSrc.EnumDefinition>(); }
      dataClassContent.enumDefinition.add(val.dataEnumDefinition); 
    }
    
    
    /**create and add routine for the list component <ClassDefinition?classDefinition>. */
    public ClassDefinition_Zbnf new_classDefinition() { 
      ClassDefinition_Zbnf val = new ClassDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ClassDefinition?classDefinition&gt;*/
    public void add_classDefinition(ClassDefinition_Zbnf val) {
      if(dataClassContent.classDefinition==null) { dataClassContent.classDefinition = new LinkedList<JavaSrc.ClassDefinition>(); }
      dataClassContent.classDefinition.add(val.dataClassDefinition); 
    }
    
    
    /**create and add routine for the list component <InterfaceDefinition?interfaceDefinition>. */
    public InterfaceDefinition_Zbnf new_interfaceDefinition() { 
      InterfaceDefinition_Zbnf val = new InterfaceDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;InterfaceDefinition?interfaceDefinition&gt;*/
    public void add_interfaceDefinition(InterfaceDefinition_Zbnf val) {
      if(dataClassContent.interfaceDefinition==null) { dataClassContent.interfaceDefinition = new LinkedList<JavaSrc.InterfaceDefinition>(); }
      dataClassContent.interfaceDefinition.add(val.dataInterfaceDefinition); 
    }
    
    
    /**create and add routine for the list component <VariableInstance?variableDefinition>. */
    public VariableInstance_Zbnf new_variableDefinition() { 
      VariableInstance_Zbnf val = new VariableInstance_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;VariableInstance?variableDefinition&gt;*/
    public void add_variableDefinition(VariableInstance_Zbnf val) {
      if(dataClassContent.variableDefinition==null) { dataClassContent.variableDefinition = new LinkedList<JavaSrc.VariableInstance>(); }
      dataClassContent.variableDefinition.add(val.dataVariableInstance); 
    }
    
    
    /**create and add routine for the list component <MethodDefinition?methodDefinition>. */
    public MethodDefinition_Zbnf new_methodDefinition() { 
      MethodDefinition_Zbnf val = new MethodDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;MethodDefinition?methodDefinition&gt;*/
    public void add_methodDefinition(MethodDefinition_Zbnf val) {
      if(dataClassContent.methodDefinition==null) { dataClassContent.methodDefinition = new LinkedList<JavaSrc.MethodDefinition>(); }
      dataClassContent.methodDefinition.add(val.dataMethodDefinition); 
    }
    
    
    /**create and add routine for the list component <ConstructorDefinition?constructorDefinition>. */
    public ConstructorDefinition_Zbnf new_constructorDefinition() { 
      ConstructorDefinition_Zbnf val = new ConstructorDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ConstructorDefinition?constructorDefinition&gt;*/
    public void add_constructorDefinition(ConstructorDefinition_Zbnf val) {
      if(dataClassContent.constructorDefinition==null) { dataClassContent.constructorDefinition = new LinkedList<JavaSrc.ConstructorDefinition>(); }
      dataClassContent.constructorDefinition.add(val.dataConstructorDefinition); 
    }
    
    
    /**create and add routine for the list component <AnnotationDefinition?annotationDefinition>. */
    public AnnotationDefinition_Zbnf new_annotationDefinition() { 
      AnnotationDefinition_Zbnf val = new AnnotationDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;AnnotationDefinition?annotationDefinition&gt;*/
    public void add_annotationDefinition(AnnotationDefinition_Zbnf val) {
      if(dataClassContent.annotationDefinition==null) { dataClassContent.annotationDefinition = new LinkedList<JavaSrc.AnnotationDefinition>(); }
      dataClassContent.annotationDefinition.add(val.dataAnnotationDefinition); 
    }
    
    
    /**create and add routine for the list component <StatementBlock?initializingBlockStatic>. */
    public StatementBlock_Zbnf new_initializingBlockStatic() { 
      StatementBlock_Zbnf val = new StatementBlock_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;StatementBlock?initializingBlockStatic&gt;*/
    public void add_initializingBlockStatic(StatementBlock_Zbnf val) {
      if(dataClassContent.initializingBlockStatic==null) { dataClassContent.initializingBlockStatic = new LinkedList<JavaSrc.StatementBlock>(); }
      dataClassContent.initializingBlockStatic.add(val.dataStatementBlock); 
    }
    
    
    /**create and add routine for the list component <StatementBlock?initializingBlock>. */
    public StatementBlock_Zbnf new_initializingBlock() { 
      StatementBlock_Zbnf val = new StatementBlock_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;StatementBlock?initializingBlock&gt;*/
    public void add_initializingBlock(StatementBlock_Zbnf val) {
      if(dataClassContent.initializingBlock==null) { dataClassContent.initializingBlock = new LinkedList<JavaSrc.StatementBlock>(); }
      dataClassContent.initializingBlock.add(val.dataStatementBlock); 
    }
    
    
  
  }




  /**Class for Writing the Component constArray.*/
  public static class ConstArray_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.ConstArray dataConstArray;
    
    /**Default ctor for non-inherit instance. */
    public ConstArray_Zbnf ( ) {
      this.dataConstArray = new JavaSrc.ConstArray();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public ConstArray_Zbnf ( JavaSrc.ConstArray data) {
            this.dataConstArray = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataConstArray._srcLine_ = line; 
      this.dataConstArray._srcColumn_ = column; 
      this.dataConstArray._srcFile_ = sFile; 
    }
  
  
  
  
    /**create and add routine for the list component <Expression?Expression>. */
    public Expression_Zbnf new_Expression() { 
      Expression_Zbnf val = new Expression_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Expression?Expression&gt;*/
    public void add_Expression(Expression_Zbnf val) {
      if(dataConstArray.expression==null) { dataConstArray.expression = new LinkedList<JavaSrc.Expression>(); }
      dataConstArray.expression.add(val.dataExpression); 
    }
    
    
    /**create and add routine for the list component <ConstArray?constArray>. */
    public ConstArray_Zbnf new_constArray() { 
      ConstArray_Zbnf val = new ConstArray_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ConstArray?constArray&gt;*/
    public void add_constArray(ConstArray_Zbnf val) {
      if(dataConstArray.constArray==null) { dataConstArray.constArray = new LinkedList<JavaSrc.ConstArray>(); }
      dataConstArray.constArray.add(val.dataConstArray); 
    }
    
    
  
  }




  /**Class for Writing the Component constNumber.*/
  public static class ConstNumber_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.ConstNumber dataConstNumber;
    
    /**Default ctor for non-inherit instance. */
    public ConstNumber_Zbnf ( ) {
      this.dataConstNumber = new JavaSrc.ConstNumber();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public ConstNumber_Zbnf ( JavaSrc.ConstNumber data) {
            this.dataConstNumber = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataConstNumber._srcLine_ = line; 
      this.dataConstNumber._srcColumn_ = column; 
      this.dataConstNumber._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?sNumber>. */
    public void set_sNumber(String val) { this.dataConstNumber.sNumber = val; }
    
    
    /**Set routine for the singular component &lt;int?hexNumber>. */
    public void set_hexNumber(int val) { this.dataConstNumber.hexNumber = val; }
    
    
    /**Set routine for the singular component &lt;int?hexNumberNegative>. */
    public void set_hexNumberNegative(int val) { this.dataConstNumber.hexNumberNegative = val; }
    
    
    /**Set routine for the singular component &lt;String?booleanConst>. */
    public void set_booleanConst(String val) { this.dataConstNumber.booleanConst = val; }
    
    
    /**Set routine for the singular component &lt;int?intNumber>. */
    public void set_intNumber(int val) { this.dataConstNumber.intNumber = val; }
    
    
    /**Set routine for the singular component &lt;String?valueFormat>. */
    public void set_valueFormat(String val) { this.dataConstNumber.valueFormat = val; }
    
    
    /**Set routine for the singular component &lt;float?floatNumber>. */
    public void set_floatNumber(float val) { this.dataConstNumber.floatNumber = val; }
    
    
    /**Set routine for the singular component &lt;float?doubleNumber>. */
    public void set_doubleNumber(float val) { this.dataConstNumber.doubleNumber = val; }
    
    
  
  }




  /**Class for Writing the Component constructorDefinition.*/
  public static class ConstructorDefinition_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.ConstructorDefinition dataConstructorDefinition;
    
    /**Default ctor for non-inherit instance. */
    public ConstructorDefinition_Zbnf ( ) {
      this.dataConstructorDefinition = new JavaSrc.ConstructorDefinition();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public ConstructorDefinition_Zbnf ( JavaSrc.ConstructorDefinition data) {
            this.dataConstructorDefinition = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataConstructorDefinition._srcLine_ = line; 
      this.dataConstructorDefinition._srcColumn_ = column; 
      this.dataConstructorDefinition._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf . &lt;Description?description&gt; for ZBNF data store*/
    public Description_Zbnf new_description() { 
      Description_Zbnf val = new Description_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Description?description&gt;*/
    public void set_description(Description_Zbnf val) { 
      dataConstructorDefinition.description = val.dataDescription;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;ModifierMethod?ModifierMethod&gt; for ZBNF data store*/
    public ModifierMethod_Zbnf new_ModifierMethod() { 
      ModifierMethod_Zbnf val = new ModifierMethod_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ModifierMethod?ModifierMethod&gt;*/
    public void set_ModifierMethod(ModifierMethod_Zbnf val) { 
      dataConstructorDefinition.modifierMethod = val.dataModifierMethod;
    }
    
    
    /**Set routine for the singular component &lt;String?constructor>. */
    public void set_constructor(String val) { this.dataConstructorDefinition.constructor = val; }
    
    
    /**create and add routine for the list component <Argument?argument>. */
    public Argument_Zbnf new_argument() { 
      Argument_Zbnf val = new Argument_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Argument?argument&gt;*/
    public void add_argument(Argument_Zbnf val) {
      if(dataConstructorDefinition.argument==null) { dataConstructorDefinition.argument = new LinkedList<JavaSrc.Argument>(); }
      dataConstructorDefinition.argument.add(val.dataArgument); 
    }
    
    
    /**create and add routine for the list component <ThrowsDeclaration?throwsDeclaration>. */
    public ThrowsDeclaration_Zbnf new_throwsDeclaration() { 
      ThrowsDeclaration_Zbnf val = new ThrowsDeclaration_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ThrowsDeclaration?throwsDeclaration&gt;*/
    public void add_throwsDeclaration(ThrowsDeclaration_Zbnf val) {
      if(dataConstructorDefinition.throwsDeclaration==null) { dataConstructorDefinition.throwsDeclaration = new LinkedList<JavaSrc.ThrowsDeclaration>(); }
      dataConstructorDefinition.throwsDeclaration.add(val.dataThrowsDeclaration); 
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;SuperCall?superCall&gt; for ZBNF data store*/
    public SuperCall_Zbnf new_superCall() { 
      SuperCall_Zbnf val = new SuperCall_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SuperCall?superCall&gt;*/
    public void set_superCall(SuperCall_Zbnf val) { 
      dataConstructorDefinition.superCall = val.dataSuperCall;
    }
    
    
    /**create and add routine for the list component <ClassDefinition?classDefinition>. */
    public ClassDefinition_Zbnf new_classDefinition() { 
      ClassDefinition_Zbnf val = new ClassDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ClassDefinition?classDefinition&gt;*/
    public void add_classDefinition(ClassDefinition_Zbnf val) {
      if(dataConstructorDefinition.classDefinition==null) { dataConstructorDefinition.classDefinition = new LinkedList<JavaSrc.ClassDefinition>(); }
      dataConstructorDefinition.classDefinition.add(val.dataClassDefinition); 
    }
    
    
    /**create and add routine for the list component <Statement?statement>. */
    public Statement_Zbnf new_statement() { 
      Statement_Zbnf val = new Statement_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Statement?statement&gt;*/
    public void add_statement(Statement_Zbnf val) {
      if(dataConstructorDefinition.statement==null) { dataConstructorDefinition.statement = new LinkedList<JavaSrc.Statement>(); }
      dataConstructorDefinition.statement.add(val.dataStatement); 
    }
    
    
  
  }




  /**Class for Writing the Component description.*/
  public static class Description_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Description dataDescription;
    
    /**Default ctor for non-inherit instance. */
    public Description_Zbnf ( ) {
      this.dataDescription = new JavaSrc.Description();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Description_Zbnf ( JavaSrc.Description data) {
            this.dataDescription = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataDescription._srcLine_ = line; 
      this.dataDescription._srcColumn_ = column; 
      this.dataDescription._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;Test_description?content>. */
    public void set_content(Test_description_Zbnf val) { this.dataDescription.content = val.dataTest_description; }
    
    
  
  }




  /**Class for Writing the Component dowhile_statement.*/
  public static class Dowhile_statement_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Dowhile_statement dataDowhile_statement;
    
    /**Default ctor for non-inherit instance. */
    public Dowhile_statement_Zbnf ( ) {
      this.dataDowhile_statement = new JavaSrc.Dowhile_statement();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Dowhile_statement_Zbnf ( JavaSrc.Dowhile_statement data) {
            this.dataDowhile_statement = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataDowhile_statement._srcLine_ = line; 
      this.dataDowhile_statement._srcColumn_ = column; 
      this.dataDowhile_statement._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf . &lt;Statement?statement&gt; for ZBNF data store*/
    public Statement_Zbnf new_statement() { 
      Statement_Zbnf val = new Statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Statement?statement&gt;*/
    public void set_statement(Statement_Zbnf val) { 
      dataDowhile_statement.statement = val.dataStatement;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Expression?Expression&gt; for ZBNF data store*/
    public Expression_Zbnf new_Expression() { 
      Expression_Zbnf val = new Expression_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Expression?Expression&gt;*/
    public void set_Expression(Expression_Zbnf val) { 
      dataDowhile_statement.expression = val.dataExpression;
    }
    
    
  
  }




  /**Class for Writing the Component enumDefinition.*/
  public static class EnumDefinition_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.EnumDefinition dataEnumDefinition;
    
    /**Default ctor for non-inherit instance. */
    public EnumDefinition_Zbnf ( ) {
      this.dataEnumDefinition = new JavaSrc.EnumDefinition();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public EnumDefinition_Zbnf ( JavaSrc.EnumDefinition data) {
            this.dataEnumDefinition = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataEnumDefinition._srcLine_ = line; 
      this.dataEnumDefinition._srcColumn_ = column; 
      this.dataEnumDefinition._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?enumTypeIdent>. */
    public void set_enumTypeIdent(String val) { this.dataEnumDefinition.enumTypeIdent = val; }
    
    
    /**create and add routine for the list component <EnumElement?enumElement>. */
    public EnumElement_Zbnf new_enumElement() { 
      EnumElement_Zbnf val = new EnumElement_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;EnumElement?enumElement&gt;*/
    public void add_enumElement(EnumElement_Zbnf val) {
      if(dataEnumDefinition.enumElement==null) { dataEnumDefinition.enumElement = new LinkedList<JavaSrc.EnumElement>(); }
      dataEnumDefinition.enumElement.add(val.dataEnumElement); 
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;ClassContent?classContent&gt; for ZBNF data store*/
    public ClassContent_Zbnf new_classContent() { 
      ClassContent_Zbnf val = new ClassContent_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ClassContent?classContent&gt;*/
    public void set_classContent(ClassContent_Zbnf val) { 
      dataEnumDefinition.classContent = val.dataClassContent;
    }
    
    
  
  }




  /**Class for Writing the Component envIdent.*/
  public static class EnvIdent_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.EnvIdent dataEnvIdent;
    
    /**Default ctor for non-inherit instance. */
    public EnvIdent_Zbnf ( ) {
      this.dataEnvIdent = new JavaSrc.EnvIdent();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public EnvIdent_Zbnf ( JavaSrc.EnvIdent data) {
            this.dataEnvIdent = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataEnvIdent._srcLine_ = line; 
      this.dataEnvIdent._srcColumn_ = column; 
      this.dataEnvIdent._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?name>. */
    public void set_name(String val) { this.dataEnvIdent.name = val; }
    
    
    /**Set routine for the singular component &lt;String?undefGenericType>. */
    public void set_undefGenericType(String val) { 
      if(dataEnvIdent.undefGenericType==null) { dataEnvIdent.undefGenericType = new LinkedList<String>(); }
      dataEnvIdent.undefGenericType.add(val); 
    }
    
    
    /**create and add routine for the list component <Type?GenericType>. */
    public Type_Zbnf new_GenericType() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?GenericType&gt;*/
    public void add_GenericType(Type_Zbnf val) {
      if(dataEnvIdent.genericType==null) { dataEnvIdent.genericType = new LinkedList<JavaSrc.Type>(); }
      dataEnvIdent.genericType.add(val.dataType); 
    }
    
    
    /**create and add routine for the list component <Type?baseGenericKey>. */
    public Type_Zbnf new_baseGenericKey() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?baseGenericKey&gt;*/
    public void add_baseGenericKey(Type_Zbnf val) {
      if(dataEnvIdent.baseGenericKey==null) { dataEnvIdent.baseGenericKey = new LinkedList<JavaSrc.Type>(); }
      dataEnvIdent.baseGenericKey.add(val.dataType); 
    }
    
    
    /**Creates an instance for the result Zbnf  (not Xml) . &lt;EnvIdent?subIdent&gt; for ZBNF data store*/
    public EnvIdent_Zbnf new_subIdent() { 
      EnvIdent_Zbnf val = new EnvIdent_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Creates an instance for the Xml data storage with default attibutes. &lt;EnvIdent?subIdent&gt;  */
    public EnvIdent_Zbnf new_subIdent(String name ) { 
      EnvIdent_Zbnf val = new EnvIdent_Zbnf();
      val.dataEnvIdent.name = name;
      //
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;EnvIdent?subIdent&gt;*/
    public void set_subIdent(EnvIdent_Zbnf val) { 
      dataEnvIdent.subIdent = val.dataEnvIdent;
    }
    
    
  
  }




  /**Class for Writing the Component forElement_statement.*/
  public static class ForElement_statement_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.ForElement_statement dataForElement_statement;
    
    /**Default ctor for non-inherit instance. */
    public ForElement_statement_Zbnf ( ) {
      this.dataForElement_statement = new JavaSrc.ForElement_statement();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public ForElement_statement_Zbnf ( JavaSrc.ForElement_statement data) {
            this.dataForElement_statement = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataForElement_statement._srcLine_ = line; 
      this.dataForElement_statement._srcColumn_ = column; 
      this.dataForElement_statement._srcFile_ = sFile; 
    }
  
  
  
  
    /**create and add routine for the list component <VariableInstance?variableDefinition>. */
    public VariableInstance_Zbnf new_variableDefinition() { 
      VariableInstance_Zbnf val = new VariableInstance_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;VariableInstance?variableDefinition&gt;*/
    public void add_variableDefinition(VariableInstance_Zbnf val) {
      if(dataForElement_statement.variableDefinition==null) { dataForElement_statement.variableDefinition = new LinkedList<JavaSrc.VariableInstance>(); }
      dataForElement_statement.variableDefinition.add(val.dataVariableInstance); 
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Expression?Expression&gt; for ZBNF data store*/
    public Expression_Zbnf new_Expression() { 
      Expression_Zbnf val = new Expression_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Expression?Expression&gt;*/
    public void set_Expression(Expression_Zbnf val) { 
      dataForElement_statement.expression = val.dataExpression;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Statement?statement&gt; for ZBNF data store*/
    public Statement_Zbnf new_statement() { 
      Statement_Zbnf val = new Statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Statement?statement&gt;*/
    public void set_statement(Statement_Zbnf val) { 
      dataForElement_statement.statement = val.dataStatement;
    }
    
    
  
  }




  /**Class for Writing the Component for_statement.*/
  public static class For_statement_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.For_statement dataFor_statement;
    
    /**Default ctor for non-inherit instance. */
    public For_statement_Zbnf ( ) {
      this.dataFor_statement = new JavaSrc.For_statement();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public For_statement_Zbnf ( JavaSrc.For_statement data) {
            this.dataFor_statement = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataFor_statement._srcLine_ = line; 
      this.dataFor_statement._srcColumn_ = column; 
      this.dataFor_statement._srcFile_ = sFile; 
    }
  
  
  
  
    /**create and add routine for the list component <VariableInstance?variableDefinition>. */
    public VariableInstance_Zbnf new_variableDefinition() { 
      VariableInstance_Zbnf val = new VariableInstance_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;VariableInstance?variableDefinition&gt;*/
    public void add_variableDefinition(VariableInstance_Zbnf val) {
      if(dataFor_statement.variableDefinition==null) { dataFor_statement.variableDefinition = new LinkedList<JavaSrc.VariableInstance>(); }
      dataFor_statement.variableDefinition.add(val.dataVariableInstance); 
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Expression?startAssignment&gt; for ZBNF data store*/
    public Expression_Zbnf new_startAssignment() { 
      Expression_Zbnf val = new Expression_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Expression?startAssignment&gt;*/
    public void set_startAssignment(Expression_Zbnf val) { 
      dataFor_statement.startAssignment = val.dataExpression;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Expression?endCondition&gt; for ZBNF data store*/
    public Expression_Zbnf new_endCondition() { 
      Expression_Zbnf val = new Expression_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Expression?endCondition&gt;*/
    public void set_endCondition(Expression_Zbnf val) { 
      dataFor_statement.endCondition = val.dataExpression;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Expression?iteratorAssignment&gt; for ZBNF data store*/
    public Expression_Zbnf new_iteratorAssignment() { 
      Expression_Zbnf val = new Expression_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Expression?iteratorAssignment&gt;*/
    public void set_iteratorAssignment(Expression_Zbnf val) { 
      dataFor_statement.iteratorAssignment = val.dataExpression;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;SimpleValue?iteratorExpression&gt; for ZBNF data store*/
    public SimpleValue_Zbnf new_iteratorExpression() { 
      SimpleValue_Zbnf val = new SimpleValue_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SimpleValue?iteratorExpression&gt;*/
    public void set_iteratorExpression(SimpleValue_Zbnf val) { 
      dataFor_statement.iteratorExpression = val.dataSimpleValue;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Statement?statement&gt; for ZBNF data store*/
    public Statement_Zbnf new_statement() { 
      Statement_Zbnf val = new Statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Statement?statement&gt;*/
    public void set_statement(Statement_Zbnf val) { 
      dataFor_statement.statement = val.dataStatement;
    }
    
    
  
  }




  /**Class for Writing the Component generic.*/
  public static class Generic_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Generic dataGeneric;
    
    /**Default ctor for non-inherit instance. */
    public Generic_Zbnf ( ) {
      this.dataGeneric = new JavaSrc.Generic();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Generic_Zbnf ( JavaSrc.Generic data) {
            this.dataGeneric = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataGeneric._srcLine_ = line; 
      this.dataGeneric._srcColumn_ = column; 
      this.dataGeneric._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?undefGenericType>. */
    public void set_undefGenericType(String val) { 
      if(dataGeneric.undefGenericType==null) { dataGeneric.undefGenericType = new LinkedList<String>(); }
      dataGeneric.undefGenericType.add(val); 
    }
    
    
    /**create and add routine for the list component <Type?GenericType>. */
    public Type_Zbnf new_GenericType() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?GenericType&gt;*/
    public void add_GenericType(Type_Zbnf val) {
      if(dataGeneric.genericType==null) { dataGeneric.genericType = new LinkedList<JavaSrc.Type>(); }
      dataGeneric.genericType.add(val.dataType); 
    }
    
    
    /**create and add routine for the list component <Type?baseGenericKey>. */
    public Type_Zbnf new_baseGenericKey() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?baseGenericKey&gt;*/
    public void add_baseGenericKey(Type_Zbnf val) {
      if(dataGeneric.baseGenericKey==null) { dataGeneric.baseGenericKey = new LinkedList<JavaSrc.Type>(); }
      dataGeneric.baseGenericKey.add(val.dataType); 
    }
    
    
  
  }




  /**Class for Writing the Component if_statement.*/
  public static class If_statement_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.If_statement dataIf_statement;
    
    /**Default ctor for non-inherit instance. */
    public If_statement_Zbnf ( ) {
      this.dataIf_statement = new JavaSrc.If_statement();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public If_statement_Zbnf ( JavaSrc.If_statement data) {
            this.dataIf_statement = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataIf_statement._srcLine_ = line; 
      this.dataIf_statement._srcColumn_ = column; 
      this.dataIf_statement._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf . &lt;Expression?Expression&gt; for ZBNF data store*/
    public Expression_Zbnf new_Expression() { 
      Expression_Zbnf val = new Expression_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Expression?Expression&gt;*/
    public void set_Expression(Expression_Zbnf val) { 
      dataIf_statement.expression = val.dataExpression;
    }
    
    
    /**Set routine for the singular component &lt;String?noAction>. */
    public void set_noAction(String val) { this.dataIf_statement.noAction = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Statement?statement&gt; for ZBNF data store*/
    public Statement_Zbnf new_statement() { 
      Statement_Zbnf val = new Statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Statement?statement&gt;*/
    public void set_statement(Statement_Zbnf val) { 
      dataIf_statement.statement = val.dataStatement;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Statement?elseStatement&gt; for ZBNF data store*/
    public Statement_Zbnf new_elseStatement() { 
      Statement_Zbnf val = new Statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Statement?elseStatement&gt;*/
    public void set_elseStatement(Statement_Zbnf val) { 
      dataIf_statement.elseStatement = val.dataStatement;
    }
    
    
  
  }




  /**Class for Writing the Component importpath.*/
  public static class Importpath_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Importpath dataImportpath;
    
    /**Default ctor for non-inherit instance. */
    public Importpath_Zbnf ( ) {
      this.dataImportpath = new JavaSrc.Importpath();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Importpath_Zbnf ( JavaSrc.Importpath data) {
            this.dataImportpath = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataImportpath._srcLine_ = line; 
      this.dataImportpath._srcColumn_ = column; 
      this.dataImportpath._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?packagePath>. */
    public void set_packagePath(String val) { 
      if(dataImportpath.packagePath==null) { dataImportpath.packagePath = new LinkedList<String>(); }
      dataImportpath.packagePath.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?class>. */
    public void set_class(String val) { this.dataImportpath.class___ = val; }
    
    
    /**Set routine for the singular component &lt;String?allClasses>. */
    public void set_allClasses(String val) { this.dataImportpath.allClasses = val; }
    
    
  
  }




  /**Class for Writing the Component java2cTag.*/
  public static class Java2cTag_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Java2cTag dataJava2cTag;
    
    /**Default ctor for non-inherit instance. */
    public Java2cTag_Zbnf ( ) {
      this.dataJava2cTag = new JavaSrc.Java2cTag();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Java2cTag_Zbnf ( JavaSrc.Java2cTag data) {
            this.dataJava2cTag = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataJava2cTag._srcLine_ = line; 
      this.dataJava2cTag._srcColumn_ = column; 
      this.dataJava2cTag._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?xxxfixStringBuffer>. */
    public void set_xxxfixStringBuffer(String val) { this.dataJava2cTag.xxxfixStringBuffer = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleArray>. */
    public void set_simpleArray(String val) { this.dataJava2cTag.simpleArray = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleVariableRef>. */
    public void set_simpleVariableRef(String val) { this.dataJava2cTag.simpleVariableRef = val; }
    
    
    /**Set routine for the singular component &lt;String?staticInstance>. */
    public void set_staticInstance(String val) { this.dataJava2cTag.staticInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedYElements>. */
    public void set_embeddedYElements(String val) { this.dataJava2cTag.embeddedYElements = val; }
    
    
    /**Set routine for the singular component &lt;String?noObject>. */
    public void set_noObject(String val) { this.dataJava2cTag.noObject = val; }
    
    
    /**Set routine for the singular component &lt;String?noGC>. */
    public void set_noGC(String val) { this.dataJava2cTag.noGC = val; }
    
    
    /**Set routine for the singular component &lt;String?nonPersistent>. */
    public void set_nonPersistent(String val) { this.dataJava2cTag.nonPersistent = val; }
    
    
    /**Set routine for the singular component &lt;String?stackInstance>. */
    public void set_stackInstance(String val) { this.dataJava2cTag.stackInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?zeroTermString>. */
    public void set_zeroTermString(String val) { this.dataJava2cTag.zeroTermString = val; }
    
    
    /**Set routine for the singular component &lt;String?ByteStringJc>. */
    public void set_ByteStringJc(String val) { this.dataJava2cTag.byteStringJc = val; }
    
    
    /**Set routine for the singular component &lt;String?return_this>. */
    public void set_return_this(String val) { this.dataJava2cTag.return_this = val; }
    
    
    /**Set routine for the singular component &lt;String?return_new>. */
    public void set_return_new(String val) { this.dataJava2cTag.return_new = val; }
    
    
    /**Set routine for the singular component &lt;String?dynamic_call>. */
    public void set_dynamic_call(String val) { this.dataJava2cTag.dynamic_call = val; }
    
    
    /**Set routine for the singular component &lt;String?xxxoverride_able>. */
    public void set_xxxoverride_able(String val) { this.dataJava2cTag.xxxoverride_able = val; }
    
    
    /**Set routine for the singular component &lt;String?noThCxt>. */
    public void set_noThCxt(String val) { this.dataJava2cTag.noThCxt = val; }
    
    
    /**Set routine for the singular component &lt;String?noStacktrace>. */
    public void set_noStacktrace(String val) { this.dataJava2cTag.noStacktrace = val; }
    
    
    /**Set routine for the singular component &lt;String?instanceTypeTag>. */
    public void set_instanceTypeTag(String val) { this.dataJava2cTag.instanceTypeTag = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedTypeTag>. */
    public void set_embeddedTypeTag(String val) { this.dataJava2cTag.embeddedTypeTag = val; }
    
    
    /**Set routine for the singular component &lt;String?stackSize>. */
    public void set_stackSize(String val) { this.dataJava2cTag.stackSize = val; }
    
    
    /**Set routine for the singular component &lt;int?bytes>. */
    public void set_bytes(int val) { 
      if(dataJava2cTag.bytes==null) { dataJava2cTag.bytes = new LinkedList<Integer>(); }
      dataJava2cTag.bytes.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?typeStack>. */
    public void set_typeStack(String val) { 
      if(dataJava2cTag.typeStack==null) { dataJava2cTag.typeStack = new LinkedList<String>(); }
      dataJava2cTag.typeStack.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?toStringNonPersist>. */
    public void set_toStringNonPersist(String val) { this.dataJava2cTag.toStringNonPersist = val; }
    
    
    /**Set routine for the singular component &lt;String?declarePersist>. */
    public void set_declarePersist(String val) { this.dataJava2cTag.declarePersist = val; }
    
    
    /**Set routine for the singular component &lt;int?StringBuilderInStack>. */
    public void set_StringBuilderInStack(int val) { this.dataJava2cTag.stringBuilderInStack = val; }
    
    
    /**Set routine for the singular component &lt;String?StringBuilderInThreadCxt>. */
    public void set_StringBuilderInThreadCxt(String val) { this.dataJava2cTag.stringBuilderInThreadCxt = val; }
    
    
    /**Set routine for the singular component &lt;String?return_InThreadCxt>. */
    public void set_return_InThreadCxt(String val) { this.dataJava2cTag.return_InThreadCxt = val; }
    
    
  
  }




  /**Class for Writing the Component java2cTagParam.*/
  public static class Java2cTagParam_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Java2cTagParam dataJava2cTagParam;
    
    /**Default ctor for non-inherit instance. */
    public Java2cTagParam_Zbnf ( ) {
      this.dataJava2cTagParam = new JavaSrc.Java2cTagParam();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Java2cTagParam_Zbnf ( JavaSrc.Java2cTagParam data) {
            this.dataJava2cTagParam = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataJava2cTagParam._srcLine_ = line; 
      this.dataJava2cTagParam._srcColumn_ = column; 
      this.dataJava2cTagParam._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?simpleArray>. */
    public void set_simpleArray(String val) { this.dataJava2cTagParam.simpleArray = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleVariableRef>. */
    public void set_simpleVariableRef(String val) { this.dataJava2cTagParam.simpleVariableRef = val; }
    
    
    /**Set routine for the singular component &lt;String?nonPersistent>. */
    public void set_nonPersistent(String val) { this.dataJava2cTagParam.nonPersistent = val; }
    
    
    /**Set routine for the singular component &lt;String?zeroTermString>. */
    public void set_zeroTermString(String val) { this.dataJava2cTagParam.zeroTermString = val; }
    
    
  
  }




  /**Class for Writing the Component maybeReferencedVariable.*/
  public static class MaybeReferencedVariable_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.MaybeReferencedVariable dataMaybeReferencedVariable;
    
    /**Default ctor for non-inherit instance. */
    public MaybeReferencedVariable_Zbnf ( ) {
      this.dataMaybeReferencedVariable = new JavaSrc.MaybeReferencedVariable();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public MaybeReferencedVariable_Zbnf ( JavaSrc.MaybeReferencedVariable data) {
            this.dataMaybeReferencedVariable = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataMaybeReferencedVariable._srcLine_ = line; 
      this.dataMaybeReferencedVariable._srcColumn_ = column; 
      this.dataMaybeReferencedVariable._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf . &lt;Reference?reference&gt; for ZBNF data store*/
    public Reference_Zbnf new_reference() { 
      Reference_Zbnf val = new Reference_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Reference?reference&gt;*/
    public void set_reference(Reference_Zbnf val) { 
      dataMaybeReferencedVariable.reference = val.dataReference;
    }
    
    
    /**Set routine for the singular component &lt;String?variableName>. */
    public void set_variableName(String val) { this.dataMaybeReferencedVariable.variableName = val; }
    
    
    /**create and add routine for the list component <Expression?arrayIndex>. */
    public Expression_Zbnf new_arrayIndex() { 
      Expression_Zbnf val = new Expression_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Expression?arrayIndex&gt;*/
    public void add_arrayIndex(Expression_Zbnf val) {
      if(dataMaybeReferencedVariable.arrayIndex==null) { dataMaybeReferencedVariable.arrayIndex = new LinkedList<JavaSrc.Expression>(); }
      dataMaybeReferencedVariable.arrayIndex.add(val.dataExpression); 
    }
    
    
  
  }




  /**Class for Writing the Component methodDefinition.*/
  public static class MethodDefinition_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.MethodDefinition dataMethodDefinition;
    
    /**Default ctor for non-inherit instance. */
    public MethodDefinition_Zbnf ( ) {
      this.dataMethodDefinition = new JavaSrc.MethodDefinition();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public MethodDefinition_Zbnf ( JavaSrc.MethodDefinition data) {
            this.dataMethodDefinition = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataMethodDefinition._srcLine_ = line; 
      this.dataMethodDefinition._srcColumn_ = column; 
      this.dataMethodDefinition._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf . &lt;Description?description&gt; for ZBNF data store*/
    public Description_Zbnf new_description() { 
      Description_Zbnf val = new Description_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Description?description&gt;*/
    public void set_description(Description_Zbnf val) { 
      dataMethodDefinition.description = val.dataDescription;
    }
    
    
    /**Set routine for the singular component &lt;String?A_Override>. */
    public void set_A_Override(String val) { this.dataMethodDefinition.a_Override = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;ModifierMethod?ModifierMethod&gt; for ZBNF data store*/
    public ModifierMethod_Zbnf new_ModifierMethod() { 
      ModifierMethod_Zbnf val = new ModifierMethod_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ModifierMethod?ModifierMethod&gt;*/
    public void set_ModifierMethod(ModifierMethod_Zbnf val) { 
      dataMethodDefinition.modifierMethod = val.dataModifierMethod;
    }
    
    
    /**Set routine for the singular component &lt;String?defineGenericLocal_WhatIsThat>. */
    public void set_defineGenericLocal_WhatIsThat(String val) { this.dataMethodDefinition.defineGenericLocal_WhatIsThat = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Type?type&gt; for ZBNF data store*/
    public Type_Zbnf new_type() { 
      Type_Zbnf val = new Type_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Type?type&gt;*/
    public void set_type(Type_Zbnf val) { 
      dataMethodDefinition.type = val.dataType;
    }
    
    
    /**Set routine for the singular component &lt;String?name>. */
    public void set_name(String val) { this.dataMethodDefinition.name = val; }
    
    
    /**create and add routine for the list component <Argument?argument>. */
    public Argument_Zbnf new_argument() { 
      Argument_Zbnf val = new Argument_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Argument?argument&gt;*/
    public void add_argument(Argument_Zbnf val) {
      if(dataMethodDefinition.argument==null) { dataMethodDefinition.argument = new LinkedList<JavaSrc.Argument>(); }
      dataMethodDefinition.argument.add(val.dataArgument); 
    }
    
    
    /**create and add routine for the list component <ThrowsDeclaration?throwsDeclaration>. */
    public ThrowsDeclaration_Zbnf new_throwsDeclaration() { 
      ThrowsDeclaration_Zbnf val = new ThrowsDeclaration_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ThrowsDeclaration?throwsDeclaration&gt;*/
    public void add_throwsDeclaration(ThrowsDeclaration_Zbnf val) {
      if(dataMethodDefinition.throwsDeclaration==null) { dataMethodDefinition.throwsDeclaration = new LinkedList<JavaSrc.ThrowsDeclaration>(); }
      dataMethodDefinition.throwsDeclaration.add(val.dataThrowsDeclaration); 
    }
    
    
    /**Set routine for the singular component &lt;String?abstractMethod>. */
    public void set_abstractMethod(String val) { this.dataMethodDefinition.abstractMethod = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;StatementBlock?methodbody&gt; for ZBNF data store*/
    public StatementBlock_Zbnf new_methodbody() { 
      StatementBlock_Zbnf val = new StatementBlock_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;StatementBlock?methodbody&gt;*/
    public void set_methodbody(StatementBlock_Zbnf val) { 
      dataMethodDefinition.methodbody = val.dataStatementBlock;
    }
    
    
  
  }




  /**Class for Writing the Component newArray.*/
  public static class NewArray_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.NewArray dataNewArray;
    
    /**Default ctor for non-inherit instance. */
    public NewArray_Zbnf ( ) {
      this.dataNewArray = new JavaSrc.NewArray();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public NewArray_Zbnf ( JavaSrc.NewArray data) {
            this.dataNewArray = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataNewArray._srcLine_ = line; 
      this.dataNewArray._srcColumn_ = column; 
      this.dataNewArray._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf . &lt;NonArrayType?newClass&gt; for ZBNF data store*/
    public NonArrayType_Zbnf new_newClass() { 
      NonArrayType_Zbnf val = new NonArrayType_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;NonArrayType?newClass&gt;*/
    public void set_newClass(NonArrayType_Zbnf val) { 
      dataNewArray.newClass = val.dataNonArrayType;
    }
    
    
    /**create and add routine for the list component <Expression?Expression>. */
    public Expression_Zbnf new_Expression() { 
      Expression_Zbnf val = new Expression_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Expression?Expression&gt;*/
    public void add_Expression(Expression_Zbnf val) {
      if(dataNewArray.expression==null) { dataNewArray.expression = new LinkedList<JavaSrc.Expression>(); }
      dataNewArray.expression.add(val.dataExpression); 
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;ConstArray?constArray&gt; for ZBNF data store*/
    public ConstArray_Zbnf new_constArray() { 
      ConstArray_Zbnf val = new ConstArray_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ConstArray?constArray&gt;*/
    public void set_constArray(ConstArray_Zbnf val) { 
      dataNewArray.constArray = val.dataConstArray;
    }
    
    
  
  }




  /**Class for Writing the Component newObject.*/
  public static class NewObject_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.NewObject dataNewObject;
    
    /**Default ctor for non-inherit instance. */
    public NewObject_Zbnf ( ) {
      this.dataNewObject = new JavaSrc.NewObject();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public NewObject_Zbnf ( JavaSrc.NewObject data) {
            this.dataNewObject = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataNewObject._srcLine_ = line; 
      this.dataNewObject._srcColumn_ = column; 
      this.dataNewObject._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf . &lt;Reference?reference&gt; for ZBNF data store*/
    public Reference_Zbnf new_reference() { 
      Reference_Zbnf val = new Reference_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Reference?reference&gt;*/
    public void set_reference(Reference_Zbnf val) { 
      dataNewObject.reference = val.dataReference;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;NonArrayType?newClass&gt; for ZBNF data store*/
    public NonArrayType_Zbnf new_newClass() { 
      NonArrayType_Zbnf val = new NonArrayType_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;NonArrayType?newClass&gt;*/
    public void set_newClass(NonArrayType_Zbnf val) { 
      dataNewObject.newClass = val.dataNonArrayType;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;ActualArguments?actualArguments&gt; for ZBNF data store*/
    public ActualArguments_Zbnf new_actualArguments() { 
      ActualArguments_Zbnf val = new ActualArguments_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ActualArguments?actualArguments&gt;*/
    public void set_actualArguments(ActualArguments_Zbnf val) { 
      dataNewObject.actualArguments = val.dataActualArguments;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;ClassContent?impliciteImplementationClass&gt; for ZBNF data store*/
    public ClassContent_Zbnf new_impliciteImplementationClass() { 
      ClassContent_Zbnf val = new ClassContent_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ClassContent?impliciteImplementationClass&gt;*/
    public void set_impliciteImplementationClass(ClassContent_Zbnf val) { 
      dataNewObject.impliciteImplementationClass = val.dataClassContent;
    }
    
    
  
  }




  /**Class for Writing the Component nonArrayType.*/
  public static class NonArrayType_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.NonArrayType dataNonArrayType;
    
    /**Default ctor for non-inherit instance. */
    public NonArrayType_Zbnf ( ) {
      this.dataNonArrayType = new JavaSrc.NonArrayType();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public NonArrayType_Zbnf ( JavaSrc.NonArrayType data) {
            this.dataNonArrayType = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataNonArrayType._srcLine_ = line; 
      this.dataNonArrayType._srcColumn_ = column; 
      this.dataNonArrayType._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf  (not Xml) . &lt;EnvIdent?envIdent&gt; for ZBNF data store*/
    public EnvIdent_Zbnf new_envIdent() { 
      EnvIdent_Zbnf val = new EnvIdent_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Creates an instance for the Xml data storage with default attibutes. &lt;EnvIdent?envIdent&gt;  */
    public EnvIdent_Zbnf new_envIdent(String name ) { 
      EnvIdent_Zbnf val = new EnvIdent_Zbnf();
      val.dataEnvIdent.name = name;
      //
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;EnvIdent?envIdent&gt;*/
    public void set_envIdent(EnvIdent_Zbnf val) { 
      dataNonArrayType.envIdent = val.dataEnvIdent;
    }
    
    
    /**Set routine for the singular component &lt;String?name>. */
    public void set_name(String val) { this.dataNonArrayType.name = val; }
    
    
    /**Set routine for the singular component &lt;String?undefGenericType>. */
    public void set_undefGenericType(String val) { 
      if(dataNonArrayType.undefGenericType==null) { dataNonArrayType.undefGenericType = new LinkedList<String>(); }
      dataNonArrayType.undefGenericType.add(val); 
    }
    
    
    /**create and add routine for the list component <Type?GenericType>. */
    public Type_Zbnf new_GenericType() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?GenericType&gt;*/
    public void add_GenericType(Type_Zbnf val) {
      if(dataNonArrayType.genericType==null) { dataNonArrayType.genericType = new LinkedList<JavaSrc.Type>(); }
      dataNonArrayType.genericType.add(val.dataType); 
    }
    
    
    /**create and add routine for the list component <Type?baseGenericKey>. */
    public Type_Zbnf new_baseGenericKey() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?baseGenericKey&gt;*/
    public void add_baseGenericKey(Type_Zbnf val) {
      if(dataNonArrayType.baseGenericKey==null) { dataNonArrayType.baseGenericKey = new LinkedList<JavaSrc.Type>(); }
      dataNonArrayType.baseGenericKey.add(val.dataType); 
    }
    
    
    /**Set routine for the singular component &lt;String?va_arg>. */
    public void set_va_arg(String val) { this.dataNonArrayType.va_arg = val; }
    
    
  
  }




  /**Class for Writing the Component operator.*/
  public static class Operator_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Operator dataOperator;
    
    /**Default ctor for non-inherit instance. */
    public Operator_Zbnf ( ) {
      this.dataOperator = new JavaSrc.Operator();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Operator_Zbnf ( JavaSrc.Operator data) {
            this.dataOperator = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataOperator._srcLine_ = line; 
      this.dataOperator._srcColumn_ = column; 
      this.dataOperator._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?operator>. */
    public void set_operator(String val) { this.dataOperator.operator = val; }
    
    
  
  }




  /**Class for Writing the Component paramDescription.*/
  public static class ParamDescription_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.ParamDescription dataParamDescription;
    
    /**Default ctor for non-inherit instance. */
    public ParamDescription_Zbnf ( ) {
      this.dataParamDescription = new JavaSrc.ParamDescription();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public ParamDescription_Zbnf ( JavaSrc.ParamDescription data) {
            this.dataParamDescription = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataParamDescription._srcLine_ = line; 
      this.dataParamDescription._srcColumn_ = column; 
      this.dataParamDescription._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?text>. */
    public void set_text(String val) { this.dataParamDescription.text = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleArray>. */
    public void set_simpleArray(String val) { 
      if(dataParamDescription.simpleArray==null) { dataParamDescription.simpleArray = new LinkedList<String>(); }
      dataParamDescription.simpleArray.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?simpleVariableRef>. */
    public void set_simpleVariableRef(String val) { 
      if(dataParamDescription.simpleVariableRef==null) { dataParamDescription.simpleVariableRef = new LinkedList<String>(); }
      dataParamDescription.simpleVariableRef.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?nonPersistent>. */
    public void set_nonPersistent(String val) { 
      if(dataParamDescription.nonPersistent==null) { dataParamDescription.nonPersistent = new LinkedList<String>(); }
      dataParamDescription.nonPersistent.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?zeroTermString>. */
    public void set_zeroTermString(String val) { 
      if(dataParamDescription.zeroTermString==null) { dataParamDescription.zeroTermString = new LinkedList<String>(); }
      dataParamDescription.zeroTermString.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?rest>. */
    public void set_rest(String val) { 
      if(dataParamDescription.rest==null) { dataParamDescription.rest = new LinkedList<String>(); }
      dataParamDescription.rest.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?auxDescription>. */
    public void set_auxDescription(String val) { 
      if(dataParamDescription.auxDescription==null) { dataParamDescription.auxDescription = new LinkedList<String>(); }
      dataParamDescription.auxDescription.add(val); 
    }
    
    
  
  }




  /**Class for Writing the Component paramInDescription.*/
  public static class ParamInDescription_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.ParamInDescription dataParamInDescription;
    
    /**Default ctor for non-inherit instance. */
    public ParamInDescription_Zbnf ( ) {
      this.dataParamInDescription = new JavaSrc.ParamInDescription();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public ParamInDescription_Zbnf ( JavaSrc.ParamInDescription data) {
            this.dataParamInDescription = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataParamInDescription._srcLine_ = line; 
      this.dataParamInDescription._srcColumn_ = column; 
      this.dataParamInDescription._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?variableName>. */
    public void set_variableName(String val) { this.dataParamInDescription.variableName = val; }
    
    
  
  }




  /**Class for Writing the Component reference.*/
  public static class Reference_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Reference dataReference;
    
    /**Default ctor for non-inherit instance. */
    public Reference_Zbnf ( ) {
      this.dataReference = new JavaSrc.Reference();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Reference_Zbnf ( JavaSrc.Reference data) {
            this.dataReference = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataReference._srcLine_ = line; 
      this.dataReference._srcColumn_ = column; 
      this.dataReference._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?isThis>. */
    public void set_isThis(String val) { this.dataReference.isThis = val; }
    
    
    /**Set routine for the singular component &lt;String?isSuper>. */
    public void set_isSuper(String val) { this.dataReference.isSuper = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;NewObject?newObject&gt; for ZBNF data store*/
    public NewObject_Zbnf new_newObject() { 
      NewObject_Zbnf val = new NewObject_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;NewObject?newObject&gt;*/
    public void set_newObject(NewObject_Zbnf val) { 
      dataReference.newObject = val.dataNewObject;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Expression?Expression&gt; for ZBNF data store*/
    public Expression_Zbnf new_Expression() { 
      Expression_Zbnf val = new Expression_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Expression?Expression&gt;*/
    public void set_Expression(Expression_Zbnf val) { 
      dataReference.expression = val.dataExpression;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;SimpleMethodCall?referenceMethod&gt; for ZBNF data store*/
    public SimpleMethodCall_Zbnf new_referenceMethod() { 
      SimpleMethodCall_Zbnf val = new SimpleMethodCall_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SimpleMethodCall?referenceMethod&gt;*/
    public void set_referenceMethod(SimpleMethodCall_Zbnf val) { 
      dataReference.referenceMethod = val.dataSimpleMethodCall;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;SimpleVariable?referenceAssociation&gt; for ZBNF data store*/
    public SimpleVariable_Zbnf new_referenceAssociation() { 
      SimpleVariable_Zbnf val = new SimpleVariable_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SimpleVariable?referenceAssociation&gt;*/
    public void set_referenceAssociation(SimpleVariable_Zbnf val) { 
      dataReference.referenceAssociation = val.dataSimpleVariable;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Reference?reference&gt; for ZBNF data store*/
    public Reference_Zbnf new_reference() { 
      Reference_Zbnf val = new Reference_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Reference?reference&gt;*/
    public void set_reference(Reference_Zbnf val) { 
      dataReference.reference = val.dataReference;
    }
    
    
  
  }




  /**Class for Writing the Component rententionpolicy.*/
  public static class Rententionpolicy_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Rententionpolicy dataRententionpolicy;
    
    /**Default ctor for non-inherit instance. */
    public Rententionpolicy_Zbnf ( ) {
      this.dataRententionpolicy = new JavaSrc.Rententionpolicy();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Rententionpolicy_Zbnf ( JavaSrc.Rententionpolicy data) {
            this.dataRententionpolicy = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataRententionpolicy._srcLine_ = line; 
      this.dataRententionpolicy._srcColumn_ = column; 
      this.dataRententionpolicy._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?RententionPolicy>. */
    public void set_RententionPolicy(String val) { this.dataRententionpolicy.rententionPolicy = val; }
    
    
  
  }




  /**Class for Writing the Component returnDescription.*/
  public static class ReturnDescription_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.ReturnDescription dataReturnDescription;
    
    /**Default ctor for non-inherit instance. */
    public ReturnDescription_Zbnf ( ) {
      this.dataReturnDescription = new JavaSrc.ReturnDescription();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public ReturnDescription_Zbnf ( JavaSrc.ReturnDescription data) {
            this.dataReturnDescription = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataReturnDescription._srcLine_ = line; 
      this.dataReturnDescription._srcColumn_ = column; 
      this.dataReturnDescription._srcFile_ = sFile; 
    }
  
  
  
  
  
  }




  /**Class for Writing the Component simpleMethodCall.*/
  public static class SimpleMethodCall_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.SimpleMethodCall dataSimpleMethodCall;
    
    /**Default ctor for non-inherit instance. */
    public SimpleMethodCall_Zbnf ( ) {
      this.dataSimpleMethodCall = new JavaSrc.SimpleMethodCall();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public SimpleMethodCall_Zbnf ( JavaSrc.SimpleMethodCall data) {
            this.dataSimpleMethodCall = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataSimpleMethodCall._srcLine_ = line; 
      this.dataSimpleMethodCall._srcColumn_ = column; 
      this.dataSimpleMethodCall._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?methodName>. */
    public void set_methodName(String val) { this.dataSimpleMethodCall.methodName = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;ActualArguments?actualArguments&gt; for ZBNF data store*/
    public ActualArguments_Zbnf new_actualArguments() { 
      ActualArguments_Zbnf val = new ActualArguments_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ActualArguments?actualArguments&gt;*/
    public void set_actualArguments(ActualArguments_Zbnf val) { 
      dataSimpleMethodCall.actualArguments = val.dataActualArguments;
    }
    
    
  
  }




  /**Class for Writing the Component simpleValue.*/
  public static class SimpleValue_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.SimpleValue dataSimpleValue;
    
    /**Default ctor for non-inherit instance. */
    public SimpleValue_Zbnf ( ) {
      this.dataSimpleValue = new JavaSrc.SimpleValue();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public SimpleValue_Zbnf ( JavaSrc.SimpleValue data) {
            this.dataSimpleValue = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataSimpleValue._srcLine_ = line; 
      this.dataSimpleValue._srcColumn_ = column; 
      this.dataSimpleValue._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?J2Ctest>. */
    public void set_J2Ctest(String val) { this.dataSimpleValue.j2Ctest = val; }
    
    
    /**Set routine for the singular component &lt;String?unaryOperator>. */
    public void set_unaryOperator(String val) { this.dataSimpleValue.unaryOperator = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleStringLiteral>. */
    public void set_simpleStringLiteral(String val) { this.dataSimpleValue.simpleStringLiteral = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;SimpleMethodCall?StringLiteralMethod&gt; for ZBNF data store*/
    public SimpleMethodCall_Zbnf new_StringLiteralMethod() { 
      SimpleMethodCall_Zbnf val = new SimpleMethodCall_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SimpleMethodCall?StringLiteralMethod&gt;*/
    public void set_StringLiteralMethod(SimpleMethodCall_Zbnf val) { 
      dataSimpleValue.stringLiteralMethod = val.dataSimpleMethodCall;
    }
    
    
    /**Set routine for the singular component &lt;String?simpleCharLiteral>. */
    public void set_simpleCharLiteral(String val) { this.dataSimpleValue.simpleCharLiteral = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Type?typeCast&gt; for ZBNF data store*/
    public Type_Zbnf new_typeCast() { 
      Type_Zbnf val = new Type_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Type?typeCast&gt;*/
    public void set_typeCast(Type_Zbnf val) { 
      dataSimpleValue.typeCast = val.dataType;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Expression?Expression&gt; for ZBNF data store*/
    public Expression_Zbnf new_Expression() { 
      Expression_Zbnf val = new Expression_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Expression?Expression&gt;*/
    public void set_Expression(Expression_Zbnf val) { 
      dataSimpleValue.expression = val.dataExpression;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;ConstNumber?constNumber&gt; for ZBNF data store*/
    public ConstNumber_Zbnf new_constNumber() { 
      ConstNumber_Zbnf val = new ConstNumber_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ConstNumber?constNumber&gt;*/
    public void set_constNumber(ConstNumber_Zbnf val) { 
      dataSimpleValue.constNumber = val.dataConstNumber;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;NewArray?newArray&gt; for ZBNF data store*/
    public NewArray_Zbnf new_newArray() { 
      NewArray_Zbnf val = new NewArray_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;NewArray?newArray&gt;*/
    public void set_newArray(NewArray_Zbnf val) { 
      dataSimpleValue.newArray = val.dataNewArray;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;NewObject?newObject&gt; for ZBNF data store*/
    public NewObject_Zbnf new_newObject() { 
      NewObject_Zbnf val = new NewObject_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;NewObject?newObject&gt;*/
    public void set_newObject(NewObject_Zbnf val) { 
      dataSimpleValue.newObject = val.dataNewObject;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;SimpleMethodCall?simpleMethodCall&gt; for ZBNF data store*/
    public SimpleMethodCall_Zbnf new_simpleMethodCall() { 
      SimpleMethodCall_Zbnf val = new SimpleMethodCall_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SimpleMethodCall?simpleMethodCall&gt;*/
    public void set_simpleMethodCall(SimpleMethodCall_Zbnf val) { 
      dataSimpleValue.simpleMethodCall = val.dataSimpleMethodCall;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;SimpleVariable?simpleVariable&gt; for ZBNF data store*/
    public SimpleVariable_Zbnf new_simpleVariable() { 
      SimpleVariable_Zbnf val = new SimpleVariable_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SimpleVariable?simpleVariable&gt;*/
    public void set_simpleVariable(SimpleVariable_Zbnf val) { 
      dataSimpleValue.simpleVariable = val.dataSimpleVariable;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Reference?reference&gt; for ZBNF data store*/
    public Reference_Zbnf new_reference() { 
      Reference_Zbnf val = new Reference_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Reference?reference&gt;*/
    public void set_reference(Reference_Zbnf val) { 
      dataSimpleValue.reference = val.dataReference;
    }
    
    
    /**Set routine for the singular component &lt;String?TypeReflect>. */
    public void set_TypeReflect(String val) { this.dataSimpleValue.typeReflect = val; }
    
    
    /**Set routine for the singular component &lt;String?preDecrement>. */
    public void set_preDecrement(String val) { this.dataSimpleValue.preDecrement = val; }
    
    
    /**Set routine for the singular component &lt;String?preIncrement>. */
    public void set_preIncrement(String val) { this.dataSimpleValue.preIncrement = val; }
    
    
    /**Set routine for the singular component &lt;String?postDecrement>. */
    public void set_postDecrement(String val) { this.dataSimpleValue.postDecrement = val; }
    
    
    /**Set routine for the singular component &lt;String?postIncrement>. */
    public void set_postIncrement(String val) { this.dataSimpleValue.postIncrement = val; }
    
    
    /**Set routine for the singular component &lt;String?classObject>. */
    public void set_classObject(String val) { this.dataSimpleValue.classObject = val; }
    
    
    /**Set routine for the singular component &lt;String?parenthesisExpression>. */
    public void set_parenthesisExpression(String val) { this.dataSimpleValue.parenthesisExpression = val; }
    
    
    /**Set routine for the singular component &lt;String?nullRef>. */
    public void set_nullRef(String val) { this.dataSimpleValue.nullRef = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;ArrayElementAccess?arrayElementAccess&gt; for ZBNF data store*/
    public ArrayElementAccess_Zbnf new_arrayElementAccess() { 
      ArrayElementAccess_Zbnf val = new ArrayElementAccess_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ArrayElementAccess?arrayElementAccess&gt;*/
    public void set_arrayElementAccess(ArrayElementAccess_Zbnf val) { 
      dataSimpleValue.arrayElementAccess = val.dataArrayElementAccess;
    }
    
    
  
  }




  /**Class for Writing the Component simpleVariable.*/
  public static class SimpleVariable_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.SimpleVariable dataSimpleVariable;
    
    /**Default ctor for non-inherit instance. */
    public SimpleVariable_Zbnf ( ) {
      this.dataSimpleVariable = new JavaSrc.SimpleVariable();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public SimpleVariable_Zbnf ( JavaSrc.SimpleVariable data) {
            this.dataSimpleVariable = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataSimpleVariable._srcLine_ = line; 
      this.dataSimpleVariable._srcColumn_ = column; 
      this.dataSimpleVariable._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?variableName>. */
    public void set_variableName(String val) { this.dataSimpleVariable.variableName = val; }
    
    
    /**create and add routine for the list component <Expression?arrayIndex>. */
    public Expression_Zbnf new_arrayIndex() { 
      Expression_Zbnf val = new Expression_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Expression?arrayIndex&gt;*/
    public void add_arrayIndex(Expression_Zbnf val) {
      if(dataSimpleVariable.arrayIndex==null) { dataSimpleVariable.arrayIndex = new LinkedList<JavaSrc.Expression>(); }
      dataSimpleVariable.arrayIndex.add(val.dataExpression); 
    }
    
    
  
  }




  /**Class for Writing the Component statement.*/
  public static class Statement_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Statement dataStatement;
    
    /**Default ctor for non-inherit instance. */
    public Statement_Zbnf ( ) {
      this.dataStatement = new JavaSrc.Statement();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Statement_Zbnf ( JavaSrc.Statement data) {
            this.dataStatement = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataStatement._srcLine_ = line; 
      this.dataStatement._srcColumn_ = column; 
      this.dataStatement._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?J2Ctest>. */
    public void set_J2Ctest(String val) { this.dataStatement.j2Ctest = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Description?description&gt; for ZBNF data store*/
    public Description_Zbnf new_description() { 
      Description_Zbnf val = new Description_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Description?description&gt;*/
    public void set_description(Description_Zbnf val) { 
      dataStatement.description = val.dataDescription;
    }
    
    
    /**Set routine for the singular component &lt;String?emtypStatementBlock>. */
    public void set_emtypStatementBlock(String val) { this.dataStatement.emtypStatementBlock = val; }
    
    
    /**Set routine for the singular component &lt;String?emptyStatement>. */
    public void set_emptyStatement(String val) { this.dataStatement.emptyStatement = val; }
    
    
    /**Set routine for the singular component &lt;String?synchronizedBock>. */
    public void set_synchronizedBock(String val) { this.dataStatement.synchronizedBock = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;SimpleValue?synchronizedObject&gt; for ZBNF data store*/
    public SimpleValue_Zbnf new_synchronizedObject() { 
      SimpleValue_Zbnf val = new SimpleValue_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SimpleValue?synchronizedObject&gt;*/
    public void set_synchronizedObject(SimpleValue_Zbnf val) { 
      dataStatement.synchronizedObject = val.dataSimpleValue;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;StatementBlock?statementBlock&gt; for ZBNF data store*/
    public StatementBlock_Zbnf new_statementBlock() { 
      StatementBlock_Zbnf val = new StatementBlock_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;StatementBlock?statementBlock&gt;*/
    public void set_statementBlock(StatementBlock_Zbnf val) { 
      dataStatement.statementBlock = val.dataStatementBlock;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;If_statement?if_statement&gt; for ZBNF data store*/
    public If_statement_Zbnf new_if_statement() { 
      If_statement_Zbnf val = new If_statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;If_statement?if_statement&gt;*/
    public void set_if_statement(If_statement_Zbnf val) { 
      dataStatement.if_statement = val.dataIf_statement;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Switch_statement?switch_statement&gt; for ZBNF data store*/
    public Switch_statement_Zbnf new_switch_statement() { 
      Switch_statement_Zbnf val = new Switch_statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Switch_statement?switch_statement&gt;*/
    public void set_switch_statement(Switch_statement_Zbnf val) { 
      dataStatement.switch_statement = val.dataSwitch_statement;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;While_statement?while_statement&gt; for ZBNF data store*/
    public While_statement_Zbnf new_while_statement() { 
      While_statement_Zbnf val = new While_statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;While_statement?while_statement&gt;*/
    public void set_while_statement(While_statement_Zbnf val) { 
      dataStatement.while_statement = val.dataWhile_statement;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Dowhile_statement?dowhile_statement&gt; for ZBNF data store*/
    public Dowhile_statement_Zbnf new_dowhile_statement() { 
      Dowhile_statement_Zbnf val = new Dowhile_statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Dowhile_statement?dowhile_statement&gt;*/
    public void set_dowhile_statement(Dowhile_statement_Zbnf val) { 
      dataStatement.dowhile_statement = val.dataDowhile_statement;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;ForElement_statement?forElement_statement&gt; for ZBNF data store*/
    public ForElement_statement_Zbnf new_forElement_statement() { 
      ForElement_statement_Zbnf val = new ForElement_statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ForElement_statement?forElement_statement&gt;*/
    public void set_forElement_statement(ForElement_statement_Zbnf val) { 
      dataStatement.forElement_statement = val.dataForElement_statement;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;For_statement?for_statement&gt; for ZBNF data store*/
    public For_statement_Zbnf new_for_statement() { 
      For_statement_Zbnf val = new For_statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;For_statement?for_statement&gt;*/
    public void set_for_statement(For_statement_Zbnf val) { 
      dataStatement.for_statement = val.dataFor_statement;
    }
    
    
    /**Set routine for the singular component &lt;String?throwNew>. */
    public void set_throwNew(String val) { this.dataStatement.throwNew = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Type?exceptionClass&gt; for ZBNF data store*/
    public Type_Zbnf new_exceptionClass() { 
      Type_Zbnf val = new Type_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Type?exceptionClass&gt;*/
    public void set_exceptionClass(Type_Zbnf val) { 
      dataStatement.exceptionClass = val.dataType;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Expression?Expression&gt; for ZBNF data store*/
    public Expression_Zbnf new_Expression() { 
      Expression_Zbnf val = new Expression_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Expression?Expression&gt;*/
    public void set_Expression(Expression_Zbnf val) { 
      dataStatement.expression = val.dataExpression;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Expression?value2&gt; for ZBNF data store*/
    public Expression_Zbnf new_value2() { 
      Expression_Zbnf val = new Expression_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Expression?value2&gt;*/
    public void set_value2(Expression_Zbnf val) { 
      dataStatement.value2 = val.dataExpression;
    }
    
    
    /**Set routine for the singular component &lt;String?throwExc>. */
    public void set_throwExc(String val) { this.dataStatement.throwExc = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Try_statement?try_statement&gt; for ZBNF data store*/
    public Try_statement_Zbnf new_try_statement() { 
      Try_statement_Zbnf val = new Try_statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Try_statement?try_statement&gt;*/
    public void set_try_statement(Try_statement_Zbnf val) { 
      dataStatement.try_statement = val.dataTry_statement;
    }
    
    
    /**Set routine for the singular component &lt;String?returnStmnt>. */
    public void set_returnStmnt(String val) { this.dataStatement.returnStmnt = val; }
    
    
    /**Set routine for the singular component &lt;String?break_statement>. */
    public void set_break_statement(String val) { this.dataStatement.break_statement = val; }
    
    
    /**create and add routine for the list component <VariableInstance?variableDefinition>. */
    public VariableInstance_Zbnf new_variableDefinition() { 
      VariableInstance_Zbnf val = new VariableInstance_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;VariableInstance?variableDefinition&gt;*/
    public void add_variableDefinition(VariableInstance_Zbnf val) {
      if(dataStatement.variableDefinition==null) { dataStatement.variableDefinition = new LinkedList<JavaSrc.VariableInstance>(); }
      dataStatement.variableDefinition.add(val.dataVariableInstance); 
    }
    
    
    /**Set routine for the singular component &lt;String?descriptionInline>. */
    public void set_descriptionInline(String val) { this.dataStatement.descriptionInline = val; }
    
    
  
  }




  /**Class for Writing the Component statementBlock.*/
  public static class StatementBlock_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.StatementBlock dataStatementBlock;
    
    /**Default ctor for non-inherit instance. */
    public StatementBlock_Zbnf ( ) {
      this.dataStatementBlock = new JavaSrc.StatementBlock();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public StatementBlock_Zbnf ( JavaSrc.StatementBlock data) {
            this.dataStatementBlock = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataStatementBlock._srcLine_ = line; 
      this.dataStatementBlock._srcColumn_ = column; 
      this.dataStatementBlock._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?descriptionOfBlock>. */
    public void set_descriptionOfBlock(String val) { 
      if(dataStatementBlock.descriptionOfBlock==null) { dataStatementBlock.descriptionOfBlock = new LinkedList<String>(); }
      dataStatementBlock.descriptionOfBlock.add(val); 
    }
    
    
    /**create and add routine for the list component <ClassDefinition?classDefinition>. */
    public ClassDefinition_Zbnf new_classDefinition() { 
      ClassDefinition_Zbnf val = new ClassDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ClassDefinition?classDefinition&gt;*/
    public void add_classDefinition(ClassDefinition_Zbnf val) {
      if(dataStatementBlock.classDefinition==null) { dataStatementBlock.classDefinition = new LinkedList<JavaSrc.ClassDefinition>(); }
      dataStatementBlock.classDefinition.add(val.dataClassDefinition); 
    }
    
    
    /**create and add routine for the list component <Statement?statement>. */
    public Statement_Zbnf new_statement() { 
      Statement_Zbnf val = new Statement_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Statement?statement&gt;*/
    public void add_statement(Statement_Zbnf val) {
      if(dataStatementBlock.statement==null) { dataStatementBlock.statement = new LinkedList<JavaSrc.Statement>(); }
      dataStatementBlock.statement.add(val.dataStatement); 
    }
    
    
  
  }




  /**Class for Writing the Component statementsOrDefinition.*/
  public static class StatementsOrDefinition_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.StatementsOrDefinition dataStatementsOrDefinition;
    
    /**Default ctor for non-inherit instance. */
    public StatementsOrDefinition_Zbnf ( ) {
      this.dataStatementsOrDefinition = new JavaSrc.StatementsOrDefinition();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public StatementsOrDefinition_Zbnf ( JavaSrc.StatementsOrDefinition data) {
            this.dataStatementsOrDefinition = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataStatementsOrDefinition._srcLine_ = line; 
      this.dataStatementsOrDefinition._srcColumn_ = column; 
      this.dataStatementsOrDefinition._srcFile_ = sFile; 
    }
  
  
  
  
    /**create and add routine for the list component <ClassDefinition?classDefinition>. */
    public ClassDefinition_Zbnf new_classDefinition() { 
      ClassDefinition_Zbnf val = new ClassDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ClassDefinition?classDefinition&gt;*/
    public void add_classDefinition(ClassDefinition_Zbnf val) {
      if(dataStatementsOrDefinition.classDefinition==null) { dataStatementsOrDefinition.classDefinition = new LinkedList<JavaSrc.ClassDefinition>(); }
      dataStatementsOrDefinition.classDefinition.add(val.dataClassDefinition); 
    }
    
    
    /**create and add routine for the list component <Statement?statement>. */
    public Statement_Zbnf new_statement() { 
      Statement_Zbnf val = new Statement_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Statement?statement&gt;*/
    public void add_statement(Statement_Zbnf val) {
      if(dataStatementsOrDefinition.statement==null) { dataStatementsOrDefinition.statement = new LinkedList<JavaSrc.Statement>(); }
      dataStatementsOrDefinition.statement.add(val.dataStatement); 
    }
    
    
  
  }




  /**Class for Writing the Component superCall.*/
  public static class SuperCall_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.SuperCall dataSuperCall;
    
    /**Default ctor for non-inherit instance. */
    public SuperCall_Zbnf ( ) {
      this.dataSuperCall = new JavaSrc.SuperCall();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public SuperCall_Zbnf ( JavaSrc.SuperCall data) {
            this.dataSuperCall = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataSuperCall._srcLine_ = line; 
      this.dataSuperCall._srcColumn_ = column; 
      this.dataSuperCall._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf . &lt;Reference?reference&gt; for ZBNF data store*/
    public Reference_Zbnf new_reference() { 
      Reference_Zbnf val = new Reference_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Reference?reference&gt;*/
    public void set_reference(Reference_Zbnf val) { 
      dataSuperCall.reference = val.dataReference;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;ActualArguments?actualArguments&gt; for ZBNF data store*/
    public ActualArguments_Zbnf new_actualArguments() { 
      ActualArguments_Zbnf val = new ActualArguments_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ActualArguments?actualArguments&gt;*/
    public void set_actualArguments(ActualArguments_Zbnf val) { 
      dataSuperCall.actualArguments = val.dataActualArguments;
    }
    
    
  
  }




  /**Class for Writing the Component switch_statement.*/
  public static class Switch_statement_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Switch_statement dataSwitch_statement;
    
    /**Default ctor for non-inherit instance. */
    public Switch_statement_Zbnf ( ) {
      this.dataSwitch_statement = new JavaSrc.Switch_statement();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Switch_statement_Zbnf ( JavaSrc.Switch_statement data) {
            this.dataSwitch_statement = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataSwitch_statement._srcLine_ = line; 
      this.dataSwitch_statement._srcColumn_ = column; 
      this.dataSwitch_statement._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf . &lt;Expression?Expression&gt; for ZBNF data store*/
    public Expression_Zbnf new_Expression() { 
      Expression_Zbnf val = new Expression_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Expression?Expression&gt;*/
    public void set_Expression(Expression_Zbnf val) { 
      dataSwitch_statement.expression = val.dataExpression;
    }
    
    
    /**create and add routine for the list component <CaseExpr?caseExpr>. */
    public CaseExpr_Zbnf new_caseExpr() { 
      CaseExpr_Zbnf val = new CaseExpr_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;CaseExpr?caseExpr&gt;*/
    public void add_caseExpr(CaseExpr_Zbnf val) {
      if(dataSwitch_statement.caseExpr==null) { dataSwitch_statement.caseExpr = new LinkedList<JavaSrc.CaseExpr>(); }
      dataSwitch_statement.caseExpr.add(val.dataCaseExpr); 
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;StatementsOrDefinition?defaultExpr&gt; for ZBNF data store*/
    public StatementsOrDefinition_Zbnf new_defaultExpr() { 
      StatementsOrDefinition_Zbnf val = new StatementsOrDefinition_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;StatementsOrDefinition?defaultExpr&gt;*/
    public void set_defaultExpr(StatementsOrDefinition_Zbnf val) { 
      dataSwitch_statement.defaultExpr = val.dataStatementsOrDefinition;
    }
    
    
  
  }




  /**Class for Writing the Component test_description.*/
  public static class Test_description_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Test_description dataTest_description;
    
    /**Default ctor for non-inherit instance. */
    public Test_description_Zbnf ( ) {
      this.dataTest_description = new JavaSrc.Test_description();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Test_description_Zbnf ( JavaSrc.Test_description data) {
            this.dataTest_description = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataTest_description._srcLine_ = line; 
      this.dataTest_description._srcColumn_ = column; 
      this.dataTest_description._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?text>. */
    public void set_text(String val) { this.dataTest_description.text = val; }
    
    
    /**Set routine for the singular component &lt;String?sizeofDescription>. */
    public void set_sizeofDescription(String val) { this.dataTest_description.sizeofDescription = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;ReturnDescription?returnDescription&gt; for ZBNF data store*/
    public ReturnDescription_Zbnf new_returnDescription() { 
      ReturnDescription_Zbnf val = new ReturnDescription_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ReturnDescription?returnDescription&gt;*/
    public void set_returnDescription(ReturnDescription_Zbnf val) { 
      dataTest_description.returnDescription = val.dataReturnDescription;
    }
    
    
    /**create and add routine for the list component <ParamInDescription?paramInDescription>. */
    public ParamInDescription_Zbnf new_paramInDescription() { 
      ParamInDescription_Zbnf val = new ParamInDescription_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ParamInDescription?paramInDescription&gt;*/
    public void add_paramInDescription(ParamInDescription_Zbnf val) {
      if(dataTest_description.paramInDescription==null) { dataTest_description.paramInDescription = new LinkedList<JavaSrc.ParamInDescription>(); }
      dataTest_description.paramInDescription.add(val.dataParamInDescription); 
    }
    
    
    /**Set routine for the singular component &lt;String?staticInstance>. */
    public void set_staticInstance(String val) { this.dataTest_description.staticInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?xxxfixStringBuffer>. */
    public void set_xxxfixStringBuffer(String val) { 
      if(dataTest_description.xxxfixStringBuffer==null) { dataTest_description.xxxfixStringBuffer = new LinkedList<String>(); }
      dataTest_description.xxxfixStringBuffer.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?simpleArray>. */
    public void set_simpleArray(String val) { 
      if(dataTest_description.simpleArray==null) { dataTest_description.simpleArray = new LinkedList<String>(); }
      dataTest_description.simpleArray.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?simpleVariableRef>. */
    public void set_simpleVariableRef(String val) { 
      if(dataTest_description.simpleVariableRef==null) { dataTest_description.simpleVariableRef = new LinkedList<String>(); }
      dataTest_description.simpleVariableRef.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?embeddedYElements>. */
    public void set_embeddedYElements(String val) { 
      if(dataTest_description.embeddedYElements==null) { dataTest_description.embeddedYElements = new LinkedList<String>(); }
      dataTest_description.embeddedYElements.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?noObject>. */
    public void set_noObject(String val) { 
      if(dataTest_description.noObject==null) { dataTest_description.noObject = new LinkedList<String>(); }
      dataTest_description.noObject.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?noGC>. */
    public void set_noGC(String val) { 
      if(dataTest_description.noGC==null) { dataTest_description.noGC = new LinkedList<String>(); }
      dataTest_description.noGC.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?nonPersistent>. */
    public void set_nonPersistent(String val) { 
      if(dataTest_description.nonPersistent==null) { dataTest_description.nonPersistent = new LinkedList<String>(); }
      dataTest_description.nonPersistent.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?stackInstance>. */
    public void set_stackInstance(String val) { 
      if(dataTest_description.stackInstance==null) { dataTest_description.stackInstance = new LinkedList<String>(); }
      dataTest_description.stackInstance.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?zeroTermString>. */
    public void set_zeroTermString(String val) { 
      if(dataTest_description.zeroTermString==null) { dataTest_description.zeroTermString = new LinkedList<String>(); }
      dataTest_description.zeroTermString.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?ByteStringJc>. */
    public void set_ByteStringJc(String val) { 
      if(dataTest_description.byteStringJc==null) { dataTest_description.byteStringJc = new LinkedList<String>(); }
      dataTest_description.byteStringJc.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?return_this>. */
    public void set_return_this(String val) { 
      if(dataTest_description.return_this==null) { dataTest_description.return_this = new LinkedList<String>(); }
      dataTest_description.return_this.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?return_new>. */
    public void set_return_new(String val) { 
      if(dataTest_description.return_new==null) { dataTest_description.return_new = new LinkedList<String>(); }
      dataTest_description.return_new.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?dynamic_call>. */
    public void set_dynamic_call(String val) { 
      if(dataTest_description.dynamic_call==null) { dataTest_description.dynamic_call = new LinkedList<String>(); }
      dataTest_description.dynamic_call.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?xxxoverride_able>. */
    public void set_xxxoverride_able(String val) { 
      if(dataTest_description.xxxoverride_able==null) { dataTest_description.xxxoverride_able = new LinkedList<String>(); }
      dataTest_description.xxxoverride_able.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?noThCxt>. */
    public void set_noThCxt(String val) { 
      if(dataTest_description.noThCxt==null) { dataTest_description.noThCxt = new LinkedList<String>(); }
      dataTest_description.noThCxt.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?noStacktrace>. */
    public void set_noStacktrace(String val) { 
      if(dataTest_description.noStacktrace==null) { dataTest_description.noStacktrace = new LinkedList<String>(); }
      dataTest_description.noStacktrace.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?instanceTypeTag>. */
    public void set_instanceTypeTag(String val) { 
      if(dataTest_description.instanceTypeTag==null) { dataTest_description.instanceTypeTag = new LinkedList<String>(); }
      dataTest_description.instanceTypeTag.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?embeddedTypeTag>. */
    public void set_embeddedTypeTag(String val) { 
      if(dataTest_description.embeddedTypeTag==null) { dataTest_description.embeddedTypeTag = new LinkedList<String>(); }
      dataTest_description.embeddedTypeTag.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?stackSize>. */
    public void set_stackSize(String val) { 
      if(dataTest_description.stackSize==null) { dataTest_description.stackSize = new LinkedList<String>(); }
      dataTest_description.stackSize.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;int?bytes>. */
    public void set_bytes(int val) { 
      if(dataTest_description.bytes==null) { dataTest_description.bytes = new LinkedList<Integer>(); }
      dataTest_description.bytes.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?typeStack>. */
    public void set_typeStack(String val) { 
      if(dataTest_description.typeStack==null) { dataTest_description.typeStack = new LinkedList<String>(); }
      dataTest_description.typeStack.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?toStringNonPersist>. */
    public void set_toStringNonPersist(String val) { 
      if(dataTest_description.toStringNonPersist==null) { dataTest_description.toStringNonPersist = new LinkedList<String>(); }
      dataTest_description.toStringNonPersist.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?declarePersist>. */
    public void set_declarePersist(String val) { 
      if(dataTest_description.declarePersist==null) { dataTest_description.declarePersist = new LinkedList<String>(); }
      dataTest_description.declarePersist.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;int?StringBuilderInStack>. */
    public void set_StringBuilderInStack(int val) { 
      if(dataTest_description.stringBuilderInStack==null) { dataTest_description.stringBuilderInStack = new LinkedList<Integer>(); }
      dataTest_description.stringBuilderInStack.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?StringBuilderInThreadCxt>. */
    public void set_StringBuilderInThreadCxt(String val) { 
      if(dataTest_description.stringBuilderInThreadCxt==null) { dataTest_description.stringBuilderInThreadCxt = new LinkedList<String>(); }
      dataTest_description.stringBuilderInThreadCxt.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?return_InThreadCxt>. */
    public void set_return_InThreadCxt(String val) { 
      if(dataTest_description.return_InThreadCxt==null) { dataTest_description.return_InThreadCxt = new LinkedList<String>(); }
      dataTest_description.return_InThreadCxt.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?rest>. */
    public void set_rest(String val) { 
      if(dataTest_description.rest==null) { dataTest_description.rest = new LinkedList<String>(); }
      dataTest_description.rest.add(val); 
    }
    
    
    /**create and add routine for the list component <Java4CAnnotationVariable?Java4CAnnotationVariable>. */
    public Java4CAnnotationVariable_Zbnf new_Java4CAnnotationVariable() { 
      Java4CAnnotationVariable_Zbnf val = new Java4CAnnotationVariable_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Java4CAnnotationVariable?Java4CAnnotationVariable&gt;*/
    public void add_Java4CAnnotationVariable(Java4CAnnotationVariable_Zbnf val) {
      if(dataTest_description.java4CAnnotationVariable==null) { dataTest_description.java4CAnnotationVariable = new LinkedList<JavaSrc.Java4CAnnotationVariable>(); }
      dataTest_description.java4CAnnotationVariable.add(val.dataJava4CAnnotationVariable); 
    }
    
    
    /**Set routine for the singular component &lt;int?fixArraySize>. */
    public void set_fixArraySize(int val) { 
      if(dataTest_description.fixArraySize==null) { dataTest_description.fixArraySize = new LinkedList<Integer>(); }
      dataTest_description.fixArraySize.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?string>. */
    public void set_string(String val) { 
      if(dataTest_description.string==null) { dataTest_description.string = new LinkedList<String>(); }
      dataTest_description.string.add(val); 
    }
    
    
    /**create and add routine for the list component <Java4CAnnotationMethod?Java4CAnnotationMethod>. */
    public Java4CAnnotationMethod_Zbnf new_Java4CAnnotationMethod() { 
      Java4CAnnotationMethod_Zbnf val = new Java4CAnnotationMethod_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Java4CAnnotationMethod?Java4CAnnotationMethod&gt;*/
    public void add_Java4CAnnotationMethod(Java4CAnnotationMethod_Zbnf val) {
      if(dataTest_description.java4CAnnotationMethod==null) { dataTest_description.java4CAnnotationMethod = new LinkedList<JavaSrc.Java4CAnnotationMethod>(); }
      dataTest_description.java4CAnnotationMethod.add(val.dataJava4CAnnotationMethod); 
    }
    
    
    /**Set routine for the singular component &lt;String?auxDescription>. */
    public void set_auxDescription(String val) { 
      if(dataTest_description.auxDescription==null) { dataTest_description.auxDescription = new LinkedList<String>(); }
      dataTest_description.auxDescription.add(val); 
    }
    
    
  
  }




  /**Class for Writing the Component throwsDeclaration.*/
  public static class ThrowsDeclaration_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.ThrowsDeclaration dataThrowsDeclaration;
    
    /**Default ctor for non-inherit instance. */
    public ThrowsDeclaration_Zbnf ( ) {
      this.dataThrowsDeclaration = new JavaSrc.ThrowsDeclaration();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public ThrowsDeclaration_Zbnf ( JavaSrc.ThrowsDeclaration data) {
            this.dataThrowsDeclaration = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataThrowsDeclaration._srcLine_ = line; 
      this.dataThrowsDeclaration._srcColumn_ = column; 
      this.dataThrowsDeclaration._srcFile_ = sFile; 
    }
  
  
  
  
  
  }




  /**Class for Writing the Component try_statement.*/
  public static class Try_statement_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Try_statement dataTry_statement;
    
    /**Default ctor for non-inherit instance. */
    public Try_statement_Zbnf ( ) {
      this.dataTry_statement = new JavaSrc.Try_statement();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Try_statement_Zbnf ( JavaSrc.Try_statement data) {
            this.dataTry_statement = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataTry_statement._srcLine_ = line; 
      this.dataTry_statement._srcColumn_ = column; 
      this.dataTry_statement._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf . &lt;StatementBlock?statementBlock&gt; for ZBNF data store*/
    public StatementBlock_Zbnf new_statementBlock() { 
      StatementBlock_Zbnf val = new StatementBlock_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;StatementBlock?statementBlock&gt;*/
    public void set_statementBlock(StatementBlock_Zbnf val) { 
      dataTry_statement.statementBlock = val.dataStatementBlock;
    }
    
    
    /**create and add routine for the list component <CatchBlock?catchBlock>. */
    public CatchBlock_Zbnf new_catchBlock() { 
      CatchBlock_Zbnf val = new CatchBlock_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;CatchBlock?catchBlock&gt;*/
    public void add_catchBlock(CatchBlock_Zbnf val) {
      if(dataTry_statement.catchBlock==null) { dataTry_statement.catchBlock = new LinkedList<JavaSrc.CatchBlock>(); }
      dataTry_statement.catchBlock.add(val.dataCatchBlock); 
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;StatementBlock?finallyBlock&gt; for ZBNF data store*/
    public StatementBlock_Zbnf new_finallyBlock() { 
      StatementBlock_Zbnf val = new StatementBlock_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;StatementBlock?finallyBlock&gt;*/
    public void set_finallyBlock(StatementBlock_Zbnf val) { 
      dataTry_statement.finallyBlock = val.dataStatementBlock;
    }
    
    
  
  }




  /**Class for Writing the Component type.*/
  public static class Type_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.Type dataType;
    
    /**Default ctor for non-inherit instance. */
    public Type_Zbnf ( ) {
      this.dataType = new JavaSrc.Type();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public Type_Zbnf ( JavaSrc.Type data) {
            this.dataType = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataType._srcLine_ = line; 
      this.dataType._srcColumn_ = column; 
      this.dataType._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf  (not Xml) . &lt;EnvIdent?envIdent&gt; for ZBNF data store*/
    public EnvIdent_Zbnf new_envIdent() { 
      EnvIdent_Zbnf val = new EnvIdent_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Creates an instance for the Xml data storage with default attibutes. &lt;EnvIdent?envIdent&gt;  */
    public EnvIdent_Zbnf new_envIdent(String name ) { 
      EnvIdent_Zbnf val = new EnvIdent_Zbnf();
      val.dataEnvIdent.name = name;
      //
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;EnvIdent?envIdent&gt;*/
    public void set_envIdent(EnvIdent_Zbnf val) { 
      dataType.envIdent = val.dataEnvIdent;
    }
    
    
    /**Set routine for the singular component &lt;String?name>. */
    public void set_name(String val) { this.dataType.name = val; }
    
    
    /**Set routine for the singular component &lt;String?undefGenericType>. */
    public void set_undefGenericType(String val) { 
      if(dataType.undefGenericType==null) { dataType.undefGenericType = new LinkedList<String>(); }
      dataType.undefGenericType.add(val); 
    }
    
    
    /**create and add routine for the list component <Type?GenericType>. */
    public Type_Zbnf new_GenericType() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?GenericType&gt;*/
    public void add_GenericType(Type_Zbnf val) {
      if(dataType.genericType==null) { dataType.genericType = new LinkedList<JavaSrc.Type>(); }
      dataType.genericType.add(val.dataType); 
    }
    
    
    /**create and add routine for the list component <Type?baseGenericKey>. */
    public Type_Zbnf new_baseGenericKey() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?baseGenericKey&gt;*/
    public void add_baseGenericKey(Type_Zbnf val) {
      if(dataType.baseGenericKey==null) { dataType.baseGenericKey = new LinkedList<JavaSrc.Type>(); }
      dataType.baseGenericKey.add(val.dataType); 
    }
    
    
    /**Set routine for the singular component &lt;String?va_arg>. */
    public void set_va_arg(String val) { this.dataType.va_arg = val; }
    
    
    /**Set routine for the singular component &lt;String?typeArray>. */
    public void set_typeArray(String val) { 
      if(dataType.typeArray==null) { dataType.typeArray = new LinkedList<String>(); }
      dataType.typeArray.add(val); 
    }
    
    
  
  }




  /**Class for Writing the Component typeIdent.*/
  public static class TypeIdent_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.TypeIdent dataTypeIdent;
    
    /**Default ctor for non-inherit instance. */
    public TypeIdent_Zbnf ( ) {
      this.dataTypeIdent = new JavaSrc.TypeIdent();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public TypeIdent_Zbnf ( JavaSrc.TypeIdent data) {
            this.dataTypeIdent = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataTypeIdent._srcLine_ = line; 
      this.dataTypeIdent._srcColumn_ = column; 
      this.dataTypeIdent._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf  (not Xml) . &lt;EnvIdent?envIdent&gt; for ZBNF data store*/
    public EnvIdent_Zbnf new_envIdent() { 
      EnvIdent_Zbnf val = new EnvIdent_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Creates an instance for the Xml data storage with default attibutes. &lt;EnvIdent?envIdent&gt;  */
    public EnvIdent_Zbnf new_envIdent(String name ) { 
      EnvIdent_Zbnf val = new EnvIdent_Zbnf();
      val.dataEnvIdent.name = name;
      //
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;EnvIdent?envIdent&gt;*/
    public void set_envIdent(EnvIdent_Zbnf val) { 
      dataTypeIdent.envIdent = val.dataEnvIdent;
    }
    
    
    /**Set routine for the singular component &lt;String?name>. */
    public void set_name(String val) { this.dataTypeIdent.name = val; }
    
    
    /**Set routine for the singular component &lt;String?undefGenericType>. */
    public void set_undefGenericType(String val) { 
      if(dataTypeIdent.undefGenericType==null) { dataTypeIdent.undefGenericType = new LinkedList<String>(); }
      dataTypeIdent.undefGenericType.add(val); 
    }
    
    
    /**create and add routine for the list component <Type?GenericType>. */
    public Type_Zbnf new_GenericType() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?GenericType&gt;*/
    public void add_GenericType(Type_Zbnf val) {
      if(dataTypeIdent.genericType==null) { dataTypeIdent.genericType = new LinkedList<JavaSrc.Type>(); }
      dataTypeIdent.genericType.add(val.dataType); 
    }
    
    
    /**create and add routine for the list component <Type?baseGenericKey>. */
    public Type_Zbnf new_baseGenericKey() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?baseGenericKey&gt;*/
    public void add_baseGenericKey(Type_Zbnf val) {
      if(dataTypeIdent.baseGenericKey==null) { dataTypeIdent.baseGenericKey = new LinkedList<JavaSrc.Type>(); }
      dataTypeIdent.baseGenericKey.add(val.dataType); 
    }
    
    
  
  }




  /**Class for Writing the Component unaryOperator.*/
  public static class UnaryOperator_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.UnaryOperator dataUnaryOperator;
    
    /**Default ctor for non-inherit instance. */
    public UnaryOperator_Zbnf ( ) {
      this.dataUnaryOperator = new JavaSrc.UnaryOperator();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public UnaryOperator_Zbnf ( JavaSrc.UnaryOperator data) {
            this.dataUnaryOperator = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataUnaryOperator._srcLine_ = line; 
      this.dataUnaryOperator._srcColumn_ = column; 
      this.dataUnaryOperator._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?unaryOperator>. */
    public void set_unaryOperator(String val) { this.dataUnaryOperator.unaryOperator = val; }
    
    
  
  }




  /**Class for Writing the Component variableDefinition.*/
  public static class VariableDefinition_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.VariableDefinition dataVariableDefinition;
    
    /**Default ctor for non-inherit instance. */
    public VariableDefinition_Zbnf ( ) {
      this.dataVariableDefinition = new JavaSrc.VariableDefinition();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public VariableDefinition_Zbnf ( JavaSrc.VariableDefinition data) {
            this.dataVariableDefinition = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataVariableDefinition._srcLine_ = line; 
      this.dataVariableDefinition._srcColumn_ = column; 
      this.dataVariableDefinition._srcFile_ = sFile; 
    }
  
  
  
  
    /**create and add routine for the list component <VariableInstance?variableDefinition>. */
    public VariableInstance_Zbnf new_variableDefinition() { 
      VariableInstance_Zbnf val = new VariableInstance_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;VariableInstance?variableDefinition&gt;*/
    public void add_variableDefinition(VariableInstance_Zbnf val) {
      if(dataVariableDefinition.variableDefinition==null) { dataVariableDefinition.variableDefinition = new LinkedList<JavaSrc.VariableInstance>(); }
      dataVariableDefinition.variableDefinition.add(val.dataVariableInstance); 
    }
    
    
  
  }




  /**Class for Writing the Component variableInstance.*/
  public static class VariableInstance_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.VariableInstance dataVariableInstance;
    
    /**Default ctor for non-inherit instance. */
    public VariableInstance_Zbnf ( ) {
      this.dataVariableInstance = new JavaSrc.VariableInstance();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public VariableInstance_Zbnf ( JavaSrc.VariableInstance data) {
            this.dataVariableInstance = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataVariableInstance._srcLine_ = line; 
      this.dataVariableInstance._srcColumn_ = column; 
      this.dataVariableInstance._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf . &lt;Description?description&gt; for ZBNF data store*/
    public Description_Zbnf new_description() { 
      Description_Zbnf val = new Description_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Description?description&gt;*/
    public void set_description(Description_Zbnf val) { 
      dataVariableInstance.description = val.dataDescription;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;ModifierVariable?ModifierVariable&gt; for ZBNF data store*/
    public ModifierVariable_Zbnf new_ModifierVariable() { 
      ModifierVariable_Zbnf val = new ModifierVariable_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ModifierVariable?ModifierVariable&gt;*/
    public void set_ModifierVariable(ModifierVariable_Zbnf val) { 
      dataVariableInstance.modifierVariable = val.dataModifierVariable;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Type?type&gt; for ZBNF data store*/
    public Type_Zbnf new_type() { 
      Type_Zbnf val = new Type_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Type?type&gt;*/
    public void set_type(Type_Zbnf val) { 
      dataVariableInstance.type = val.dataType;
    }
    
    
    /**Set routine for the singular component &lt;String?variableName>. */
    public void set_variableName(String val) { this.dataVariableInstance.variableName = val; }
    
    
    /**Set routine for the singular component &lt;String?array>. */
    public void set_array(String val) { this.dataVariableInstance.array = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;NewArray?newArray&gt; for ZBNF data store*/
    public NewArray_Zbnf new_newArray() { 
      NewArray_Zbnf val = new NewArray_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;NewArray?newArray&gt;*/
    public void set_newArray(NewArray_Zbnf val) { 
      dataVariableInstance.newArray = val.dataNewArray;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;ConstArray?constArray&gt; for ZBNF data store*/
    public ConstArray_Zbnf new_constArray() { 
      ConstArray_Zbnf val = new ConstArray_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ConstArray?constArray&gt;*/
    public void set_constArray(ConstArray_Zbnf val) { 
      dataVariableInstance.constArray = val.dataConstArray;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Expression?Expression&gt; for ZBNF data store*/
    public Expression_Zbnf new_Expression() { 
      Expression_Zbnf val = new Expression_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Expression?Expression&gt;*/
    public void set_Expression(Expression_Zbnf val) { 
      dataVariableInstance.expression = val.dataExpression;
    }
    
    
  
  }




  /**Class for Writing the Component while_statement.*/
  public static class While_statement_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.While_statement dataWhile_statement;
    
    /**Default ctor for non-inherit instance. */
    public While_statement_Zbnf ( ) {
      this.dataWhile_statement = new JavaSrc.While_statement();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public While_statement_Zbnf ( JavaSrc.While_statement data) {
            this.dataWhile_statement = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataWhile_statement._srcLine_ = line; 
      this.dataWhile_statement._srcColumn_ = column; 
      this.dataWhile_statement._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf . &lt;Expression?Expression&gt; for ZBNF data store*/
    public Expression_Zbnf new_Expression() { 
      Expression_Zbnf val = new Expression_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Expression?Expression&gt;*/
    public void set_Expression(Expression_Zbnf val) { 
      dataWhile_statement.expression = val.dataExpression;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Statement?statement&gt; for ZBNF data store*/
    public Statement_Zbnf new_statement() { 
      Statement_Zbnf val = new Statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Statement?statement&gt;*/
    public void set_statement(Statement_Zbnf val) { 
      dataWhile_statement.statement = val.dataStatement;
    }
    
    
  
  }




  /**Class for Writing the Component ExprPart.*/
  public static class ExprPart_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.ExprPart dataExprPart;
    
    /**Default ctor for non-inherit instance. */
    public ExprPart_Zbnf ( ) {
      this.dataExprPart = new JavaSrc.ExprPart();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public ExprPart_Zbnf ( JavaSrc.ExprPart data) {
            this.dataExprPart = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataExprPart._srcLine_ = line; 
      this.dataExprPart._srcColumn_ = column; 
      this.dataExprPart._srcFile_ = sFile; 
    }
  
  
  
  
    /**Creates an instance for the result Zbnf . &lt;SimpleValue?value&gt; for ZBNF data store*/
    public SimpleValue_Zbnf new_value() { 
      SimpleValue_Zbnf val = new SimpleValue_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SimpleValue?value&gt;*/
    public void set_value(SimpleValue_Zbnf val) { 
      dataExprPart.value = val.dataSimpleValue;
    }
    
    
    /**Set routine for the singular component &lt;String?operator>. */
    public void set_operator(String val) { this.dataExprPart.operator = val; }
    
    
  
  }




  /**Class for Writing the Component enumElement.*/
  public static class EnumElement_Zbnf implements SetLineColumn_ifc {
    /**Referenced working instance will be filled.*/
    final JavaSrc.EnumElement dataEnumElement;
    
    /**Default ctor for non-inherit instance. */
    public EnumElement_Zbnf ( ) {
      this.dataEnumElement = new JavaSrc.EnumElement();
    }
    
    /**ctor called as super ctor possible, not in any case for a inherited instance. */
    public EnumElement_Zbnf ( JavaSrc.EnumElement data) {
            this.dataEnumElement = data;
    }
    
    @Override public int setLineColumnFileMode ( ) {
      return SetLineColumn_ifc.mLine + SetLineColumn_ifc.mColumn + SetLineColumn_ifc.mFile; }
    
    @Override public void setLineColumnFile ( int line, int column, String sFile) { 
      this.dataEnumElement._srcLine_ = line; 
      this.dataEnumElement._srcColumn_ = column; 
      this.dataEnumElement._srcFile_ = sFile; 
    }
  
  
  
  
    /**Set routine for the singular component &lt;String?enumIdent>. */
    public void set_enumIdent(String val) { this.dataEnumElement.enumIdent = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;ActualArguments?actualArguments&gt; for ZBNF data store*/
    public ActualArguments_Zbnf new_actualArguments() { 
      ActualArguments_Zbnf val = new ActualArguments_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ActualArguments?actualArguments&gt;*/
    public void set_actualArguments(ActualArguments_Zbnf val) { 
      dataEnumElement.actualArguments = val.dataActualArguments;
    }
    
    
  
  }


}

